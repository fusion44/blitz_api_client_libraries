/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectionInfo,
  HTTPValidationError,
  LoginInput,
  RawDebugLogData,
  SystemInfo,
} from '../models';
import {
    ConnectionInfoFromJSON,
    ConnectionInfoToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LoginInputFromJSON,
    LoginInputToJSON,
    RawDebugLogDataFromJSON,
    RawDebugLogDataToJSON,
    SystemInfoFromJSON,
    SystemInfoToJSON,
} from '../models';

export interface SystemChangePasswordSystemChangePasswordPostRequest {
    type: string;
    oldPassword: string;
    newPassword: string;
}

export interface SystemLoginSystemLoginPostRequest {
    loginInput: LoginInput;
}

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI {

    /**
     * Endpoint to change your password a, b or c
     */
    async systemChangePasswordSystemChangePasswordPostRaw(requestParameters: SystemChangePasswordSystemChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling systemChangePasswordSystemChangePasswordPost.');
        }

        if (requestParameters.oldPassword === null || requestParameters.oldPassword === undefined) {
            throw new runtime.RequiredError('oldPassword','Required parameter requestParameters.oldPassword was null or undefined when calling systemChangePasswordSystemChangePasswordPost.');
        }

        if (requestParameters.newPassword === null || requestParameters.newPassword === undefined) {
            throw new runtime.RequiredError('newPassword','Required parameter requestParameters.newPassword was null or undefined when calling systemChangePasswordSystemChangePasswordPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.oldPassword !== undefined) {
            queryParameters['old_password'] = requestParameters.oldPassword;
        }

        if (requestParameters.newPassword !== undefined) {
            queryParameters['new_password'] = requestParameters.newPassword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Endpoint to change your password a, b or c
     */
    async systemChangePasswordSystemChangePasswordPost(requestParameters: SystemChangePasswordSystemChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.systemChangePasswordSystemChangePasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get credential information to connect external apps.
     */
    async systemConnectionInfoSystemConnectionInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectionInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/connection-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionInfoFromJSON(jsonValue));
    }

    /**
     * Get credential information to connect external apps.
     */
    async systemConnectionInfoSystemConnectionInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectionInfo> {
        const response = await this.systemConnectionInfoSystemConnectionInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     *  This endpoint will gather latest system logs and return it in a raw string. This endpoint will **not** return immediately because it gathers all data on time of the request. 
     * Get raw system logs as a text string.
     */
    async systemGetDebugLogsRawSystemGetDebugLogsRawGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RawDebugLogData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/get-debug-logs-raw`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RawDebugLogDataFromJSON(jsonValue));
    }

    /**
     *  This endpoint will gather latest system logs and return it in a raw string. This endpoint will **not** return immediately because it gathers all data on time of the request. 
     * Get raw system logs as a text string.
     */
    async systemGetDebugLogsRawSystemGetDebugLogsRawGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RawDebugLogData> {
        const response = await this.systemGetDebugLogsRawSystemGetDebugLogsRawGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get system status information
     */
    async systemGetSystemInfoSystemGetSystemInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/get-system-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemInfoFromJSON(jsonValue));
    }

    /**
     * Get system status information
     */
    async systemGetSystemInfoSystemGetSystemInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemInfo> {
        const response = await this.systemGetSystemInfoSystemGetSystemInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to hardware status information.
     */
    async systemHardwareInfoSubSystemHardwareInfoSubGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/hardware-info-sub`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Subscribe to hardware status information.
     */
    async systemHardwareInfoSubSystemHardwareInfoSubGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.systemHardwareInfoSubSystemHardwareInfoSubGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get hardware status information.
     */
    async systemHardwareInfoSystemHardwareInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/hardware-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get hardware status information.
     */
    async systemHardwareInfoSystemHardwareInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.systemHardwareInfoSystemHardwareInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Logs the user in with the current password
     */
    async systemLoginSystemLoginPostRaw(requestParameters: SystemLoginSystemLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.loginInput === null || requestParameters.loginInput === undefined) {
            throw new runtime.RequiredError('loginInput','Required parameter requestParameters.loginInput was null or undefined when calling systemLoginSystemLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/system/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInputToJSON(requestParameters.loginInput),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Logs the user in with the current password
     */
    async systemLoginSystemLoginPost(requestParameters: SystemLoginSystemLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.systemLoginSystemLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attempts to reboot the system.     Will send a `system_reboot_initiated` SSE message immediately to     all connected clients.     
     * Reboots the system
     */
    async systemRebootSystemRebootPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/reboot`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Attempts to reboot the system.     Will send a `system_reboot_initiated` SSE message immediately to     all connected clients.     
     * Reboots the system
     */
    async systemRebootSystemRebootPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.systemRebootSystemRebootPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Endpoint to refresh an authentication token
     */
    async systemRefreshTokenSystemRefreshTokenPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Endpoint to refresh an authentication token
     */
    async systemRefreshTokenSystemRefreshTokenPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.systemRefreshTokenSystemRefreshTokenPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Attempts to shutdown the system.     Will send a `system_shutdown_initiated` SSE message immediately to all     connected clients.     
     * Shuts the system down
     */
    async systemShutdownSystemShutdownPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/shutdown`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Attempts to shutdown the system.     Will send a `system_shutdown_initiated` SSE message immediately to all     connected clients.     
     * Shuts the system down
     */
    async systemShutdownSystemShutdownPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.systemShutdownSystemShutdownPostRaw(initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  UninstallData,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UninstallDataFromJSON,
    UninstallDataToJSON,
} from '../models';

export interface AppsInstallAppsInstallNamePostRequest {
    name: string;
}

export interface AppsInstallAppsUninstallNamePostRequest {
    name: string;
    uninstallData: UninstallData;
}

export interface AppsStatusAppsStatusIdGetRequest {
    id: any;
}

/**
 * 
 */
export class AppsApi extends runtime.BaseAPI {

    /**
     * Install app
     */
    async appsInstallAppsInstallNamePostRaw(requestParameters: AppsInstallAppsInstallNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling appsInstallAppsInstallNamePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/install/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Install app
     */
    async appsInstallAppsInstallNamePost(requestParameters: AppsInstallAppsInstallNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.appsInstallAppsInstallNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uninstall app
     */
    async appsInstallAppsUninstallNamePostRaw(requestParameters: AppsInstallAppsUninstallNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling appsInstallAppsUninstallNamePost.');
        }

        if (requestParameters.uninstallData === null || requestParameters.uninstallData === undefined) {
            throw new runtime.RequiredError('uninstallData','Required parameter requestParameters.uninstallData was null or undefined when calling appsInstallAppsUninstallNamePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/uninstall/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UninstallDataToJSON(requestParameters.uninstallData),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Uninstall app
     */
    async appsInstallAppsUninstallNamePost(requestParameters: AppsInstallAppsUninstallNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.appsInstallAppsUninstallNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the status available apps.
     */
    async appsStatusAppsStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get the status available apps.
     */
    async appsStatusAppsStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.appsStatusAppsStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the status of a single app by id.
     */
    async appsStatusAppsStatusIdGetRaw(requestParameters: AppsStatusAppsStatusIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsStatusAppsStatusIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get the status of a single app by id.
     */
    async appsStatusAppsStatusIdGet(requestParameters: AppsStatusAppsStatusIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.appsStatusAppsStatusIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to status changes of currently installed apps.
     */
    async appsStatusSubAppsStatusSubGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/status-sub`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Subscribe to status changes of currently installed apps.
     */
    async appsStatusSubAppsStatusSubGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.appsStatusSubAppsStatusSubGetRaw(initOverrides);
        return await response.value();
    }

}

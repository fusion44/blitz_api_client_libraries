/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  StartDoneData,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    StartDoneDataFromJSON,
    StartDoneDataToJSON,
} from '../models';

export interface SetupStartDoneSetupSetupStartDonePostRequest {
    startDoneData: StartDoneData;
}

/**
 * 
 */
export class SetupApi extends runtime.BaseAPI {

    /**
     * Get Shutdown
     */
    async getShutdownSetupShutdownGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/setup/shutdown`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Shutdown
     */
    async getShutdownSetupShutdownGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getShutdownSetupShutdownGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Status
     */
    async getStatusSetupStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/setup/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Status
     */
    async getStatusSetupStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getStatusSetupStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Setup Final Done
     */
    async setupFinalDoneSetupSetupFinalDonePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/setup/setup-final-done`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Setup Final Done
     */
    async setupFinalDoneSetupSetupFinalDonePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setupFinalDoneSetupSetupFinalDonePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Setup Final Info
     */
    async setupFinalInfoSetupSetupFinalInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/setup/setup-final-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Setup Final Info
     */
    async setupFinalInfoSetupSetupFinalInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setupFinalInfoSetupSetupFinalInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Setup Start Done
     */
    async setupStartDoneSetupSetupStartDonePostRaw(requestParameters: SetupStartDoneSetupSetupStartDonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.startDoneData === null || requestParameters.startDoneData === undefined) {
            throw new runtime.RequiredError('startDoneData','Required parameter requestParameters.startDoneData was null or undefined when calling setupStartDoneSetupSetupStartDonePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/setup/setup-start-done`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartDoneDataToJSON(requestParameters.startDoneData),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Setup Start Done
     */
    async setupStartDoneSetupSetupStartDonePost(requestParameters: SetupStartDoneSetupSetupStartDonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setupStartDoneSetupSetupStartDonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Setup Start Info
     */
    async setupStartInfoSetupSetupStartInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/setup/setup-start-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Setup Start Info
     */
    async setupStartInfoSetupSetupStartInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setupStartInfoSetupSetupStartInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Setup Sync Info
     */
    async setupSyncInfoSetupSetupSyncInfoPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/setup/setup-sync-info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Setup Sync Info
     */
    async setupSyncInfoSetupSetupSyncInfoPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setupSyncInfoSetupSetupSyncInfoPostRaw(initOverrides);
        return await response.value();
    }

}

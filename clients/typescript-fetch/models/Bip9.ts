/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Bip9Data } from './Bip9Data';
import {
    Bip9DataFromJSON,
    Bip9DataFromJSONTyped,
    Bip9DataToJSON,
} from './Bip9Data';
import type { Statistics } from './Statistics';
import {
    StatisticsFromJSON,
    StatisticsFromJSONTyped,
    StatisticsToJSON,
} from './Statistics';

/**
 * Status of bip9 softforks(only for "bip9" type)
 * @export
 * @interface Bip9
 */
export interface Bip9 {
    /**
     * One of "defined", "started", "locked_in", "active", "failed" 
     * @type {string}
     * @memberof Bip9
     */
    status: string;
    /**
     * the bit(0-28) in the block version field used to signal this softfork(only for `started` status)
     * @type {number}
     * @memberof Bip9
     */
    bit?: number;
    /**
     * The minimum median time past of a block at which the bit gains its meaning
     * @type {number}
     * @memberof Bip9
     */
    startTime: number;
    /**
     * The median time past of a block at which the deployment is considered failed if not yet locked in
     * @type {number}
     * @memberof Bip9
     */
    timeout: number;
    /**
     * Height of the first block to which the status applies
     * @type {number}
     * @memberof Bip9
     */
    since: number;
    /**
     * Minimum height of blocks for which the rules may be enforced
     * @type {number}
     * @memberof Bip9
     */
    minActivationHeight: number;
    /**
     * 
     * @type {Statistics}
     * @memberof Bip9
     */
    statistics?: Statistics;
    /**
     * Height of the first block which the rules are or will be enforced(only for `buried` type, or `bip9` type with `active` status)
     * @type {number}
     * @memberof Bip9
     */
    height?: number;
    /**
     * True if the rules are enforced for the mempool and the next block
     * @type {boolean}
     * @memberof Bip9
     */
    active?: boolean;
}

/**
 * Check if a given object implements the Bip9 interface.
 */
export function instanceOfBip9(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "timeout" in value;
    isInstance = isInstance && "since" in value;
    isInstance = isInstance && "minActivationHeight" in value;

    return isInstance;
}

export function Bip9FromJSON(json: any): Bip9 {
    return Bip9FromJSONTyped(json, false);
}

export function Bip9FromJSONTyped(json: any, ignoreDiscriminator: boolean): Bip9 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': json['status'],
        'bit': !exists(json, 'bit') ? undefined : json['bit'],
        'startTime': json['start_time'],
        'timeout': json['timeout'],
        'since': json['since'],
        'minActivationHeight': json['min_activation_height'],
        'statistics': !exists(json, 'statistics') ? undefined : StatisticsFromJSON(json['statistics']),
        'height': !exists(json, 'height') ? undefined : json['height'],
        'active': !exists(json, 'active') ? undefined : json['active'],
    };
}

export function Bip9ToJSON(value?: Bip9 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': value.status,
        'bit': value.bit,
        'start_time': value.startTime,
        'timeout': value.timeout,
        'since': value.since,
        'min_activation_height': value.minActivationHeight,
        'statistics': StatisticsToJSON(value.statistics),
        'height': value.height,
        'active': value.active,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HTLCAttemptFailure } from './HTLCAttemptFailure';
import {
    HTLCAttemptFailureFromJSON,
    HTLCAttemptFailureFromJSONTyped,
    HTLCAttemptFailureToJSON,
} from './HTLCAttemptFailure';
import type { HTLCStatus } from './HTLCStatus';
import {
    HTLCStatusFromJSON,
    HTLCStatusFromJSONTyped,
    HTLCStatusToJSON,
} from './HTLCStatus';
import type { Route } from './Route';
import {
    RouteFromJSON,
    RouteFromJSONTyped,
    RouteToJSON,
} from './Route';

/**
 * 
 * @export
 * @interface HTLCAttempt
 */
export interface HTLCAttempt {
    /**
     * 
     * @type {number}
     * @memberof HTLCAttempt
     */
    attemptId: number;
    /**
     * 
     * @type {HTLCStatus}
     * @memberof HTLCAttempt
     */
    status: HTLCStatus;
    /**
     * 
     * @type {Route}
     * @memberof HTLCAttempt
     */
    route: Route;
    /**
     * 
     * @type {number}
     * @memberof HTLCAttempt
     */
    attemptTimeNs: number;
    /**
     * 
     * @type {number}
     * @memberof HTLCAttempt
     */
    resolveTimeNs: number;
    /**
     * 
     * @type {HTLCAttemptFailure}
     * @memberof HTLCAttempt
     */
    failure: HTLCAttemptFailure;
    /**
     * 
     * @type {string}
     * @memberof HTLCAttempt
     */
    preimage: string;
}

/**
 * Check if a given object implements the HTLCAttempt interface.
 */
export function instanceOfHTLCAttempt(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "attemptId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "route" in value;
    isInstance = isInstance && "attemptTimeNs" in value;
    isInstance = isInstance && "resolveTimeNs" in value;
    isInstance = isInstance && "failure" in value;
    isInstance = isInstance && "preimage" in value;

    return isInstance;
}

export function HTLCAttemptFromJSON(json: any): HTLCAttempt {
    return HTLCAttemptFromJSONTyped(json, false);
}

export function HTLCAttemptFromJSONTyped(json: any, ignoreDiscriminator: boolean): HTLCAttempt {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attemptId': json['attempt_id'],
        'status': HTLCStatusFromJSON(json['status']),
        'route': RouteFromJSON(json['route']),
        'attemptTimeNs': json['attempt_time_ns'],
        'resolveTimeNs': json['resolve_time_ns'],
        'failure': HTLCAttemptFailureFromJSON(json['failure']),
        'preimage': json['preimage'],
    };
}

export function HTLCAttemptToJSON(value?: HTLCAttempt | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attempt_id': value.attemptId,
        'status': HTLCStatusToJSON(value.status),
        'route': RouteToJSON(value.route),
        'attempt_time_ns': value.attemptTimeNs,
        'resolve_time_ns': value.resolveTimeNs,
        'failure': HTLCAttemptFailureToJSON(value.failure),
        'preimage': value.preimage,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SoftFork } from './SoftFork';
import {
    SoftForkFromJSON,
    SoftForkFromJSONTyped,
    SoftForkToJSON,
} from './SoftFork';

/**
 * 
 * @export
 * @interface BlockchainInfo
 */
export interface BlockchainInfo {
    /**
     * Current network name(main, test, regtest)
     * @type {string}
     * @memberof BlockchainInfo
     */
    chain: string;
    /**
     * The height of the most-work fully-validated chain. The genesis block has height 0
     * @type {number}
     * @memberof BlockchainInfo
     */
    blocks: number;
    /**
     * The current number of headers we have validated
     * @type {number}
     * @memberof BlockchainInfo
     */
    headers: number;
    /**
     * The hash of the currently best block
     * @type {string}
     * @memberof BlockchainInfo
     */
    bestBlockHash: string;
    /**
     * The current difficulty
     * @type {number}
     * @memberof BlockchainInfo
     */
    difficulty: number;
    /**
     * Median time for the current best block
     * @type {number}
     * @memberof BlockchainInfo
     */
    mediantime: number;
    /**
     * Estimate of verification progress[0..1]
     * @type {number}
     * @memberof BlockchainInfo
     */
    verificationProgress: number;
    /**
     * Estimate of whether this node is in Initial Block Download mode
     * @type {boolean}
     * @memberof BlockchainInfo
     */
    initialBlockDownload: boolean;
    /**
     * total amount of work in active chain, in hexadecimal
     * @type {string}
     * @memberof BlockchainInfo
     */
    chainwork: string;
    /**
     * The estimated size of the block and undo files on disk
     * @type {number}
     * @memberof BlockchainInfo
     */
    sizeOnDisk: number;
    /**
     * If the blocks are subject to pruning
     * @type {boolean}
     * @memberof BlockchainInfo
     */
    pruned: boolean;
    /**
     * Lowest-height complete block stored(only present if pruning is enabled)
     * @type {number}
     * @memberof BlockchainInfo
     */
    pruneHeight?: number;
    /**
     * Whether automatic pruning is enabled(only present if pruning is enabled)
     * @type {boolean}
     * @memberof BlockchainInfo
     */
    automaticPruning?: boolean;
    /**
     * The target size used by pruning(only present if automatic pruning is enabled)
     * @type {number}
     * @memberof BlockchainInfo
     */
    pruneTargetSize?: number;
    /**
     * Any network and blockchain warnings
     * @type {string}
     * @memberof BlockchainInfo
     */
    warnings: string;
    /**
     * Status of softforks
     * @type {Array<SoftFork>}
     * @memberof BlockchainInfo
     */
    softforks: Array<SoftFork>;
}

/**
 * Check if a given object implements the BlockchainInfo interface.
 */
export function instanceOfBlockchainInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "blocks" in value;
    isInstance = isInstance && "headers" in value;
    isInstance = isInstance && "bestBlockHash" in value;
    isInstance = isInstance && "difficulty" in value;
    isInstance = isInstance && "mediantime" in value;
    isInstance = isInstance && "verificationProgress" in value;
    isInstance = isInstance && "initialBlockDownload" in value;
    isInstance = isInstance && "chainwork" in value;
    isInstance = isInstance && "sizeOnDisk" in value;
    isInstance = isInstance && "pruned" in value;
    isInstance = isInstance && "warnings" in value;
    isInstance = isInstance && "softforks" in value;

    return isInstance;
}

export function BlockchainInfoFromJSON(json: any): BlockchainInfo {
    return BlockchainInfoFromJSONTyped(json, false);
}

export function BlockchainInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockchainInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chain': json['chain'],
        'blocks': json['blocks'],
        'headers': json['headers'],
        'bestBlockHash': json['best_block_hash'],
        'difficulty': json['difficulty'],
        'mediantime': json['mediantime'],
        'verificationProgress': json['verification_progress'],
        'initialBlockDownload': json['initial_block_download'],
        'chainwork': json['chainwork'],
        'sizeOnDisk': json['size_on_disk'],
        'pruned': json['pruned'],
        'pruneHeight': !exists(json, 'prune_height') ? undefined : json['prune_height'],
        'automaticPruning': !exists(json, 'automatic_pruning') ? undefined : json['automatic_pruning'],
        'pruneTargetSize': !exists(json, 'prune_target_size') ? undefined : json['prune_target_size'],
        'warnings': json['warnings'],
        'softforks': ((json['softforks'] as Array<any>).map(SoftForkFromJSON)),
    };
}

export function BlockchainInfoToJSON(value?: BlockchainInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chain': value.chain,
        'blocks': value.blocks,
        'headers': value.headers,
        'best_block_hash': value.bestBlockHash,
        'difficulty': value.difficulty,
        'mediantime': value.mediantime,
        'verification_progress': value.verificationProgress,
        'initial_block_download': value.initialBlockDownload,
        'chainwork': value.chainwork,
        'size_on_disk': value.sizeOnDisk,
        'pruned': value.pruned,
        'prune_height': value.pruneHeight,
        'automatic_pruning': value.automaticPruning,
        'prune_target_size': value.pruneTargetSize,
        'warnings': value.warnings,
        'softforks': ((value.softforks as Array<any>).map(SoftForkToJSON)),
    };
}


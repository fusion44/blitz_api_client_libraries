/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FeaturesEntry } from './FeaturesEntry';
import {
    FeaturesEntryFromJSON,
    FeaturesEntryFromJSONTyped,
    FeaturesEntryToJSON,
} from './FeaturesEntry';
import type { InvoiceHTLC } from './InvoiceHTLC';
import {
    InvoiceHTLCFromJSON,
    InvoiceHTLCFromJSONTyped,
    InvoiceHTLCToJSON,
} from './InvoiceHTLC';
import type { InvoiceState } from './InvoiceState';
import {
    InvoiceStateFromJSON,
    InvoiceStateFromJSONTyped,
    InvoiceStateToJSON,
} from './InvoiceState';
import type { RouteHint } from './RouteHint';
import {
    RouteHintFromJSON,
    RouteHintFromJSONTyped,
    RouteHintToJSON,
} from './RouteHint';

/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * Optional memo to attach along with the invoice. Used for record keeping purposes for the invoice's creator,
     *         and will also be set in the description field of the encoded payment request if the description_hash field is not being used.
     * @type {string}
     * @memberof Invoice
     */
    memo?: string;
    /**
     * The hex-encoded preimage(32 byte) which will allow settling an incoming HTLC payable to this preimage.
     * @type {string}
     * @memberof Invoice
     */
    rPreimage?: string;
    /**
     * The hash of the preimage.
     * @type {string}
     * @memberof Invoice
     */
    rHash?: string;
    /**
     * The value of this invoice in milli satoshis.
     * @type {number}
     * @memberof Invoice
     */
    valueMsat: number;
    /**
     * Whether this invoice has been fulfilled
     * @type {boolean}
     * @memberof Invoice
     */
    settled?: boolean;
    /**
     * When this invoice was created. Not available with CLN.
     * @type {number}
     * @memberof Invoice
     */
    creationDate?: number;
    /**
     * When this invoice was settled. Not available with pending invoices.
     * @type {number}
     * @memberof Invoice
     */
    settleDate?: number;
    /**
     * The time at which this invoice expires
     * @type {number}
     * @memberof Invoice
     */
    expiryDate?: number;
    /**
     * A bare-bones invoice for a payment within the
     *     Lightning Network. With the details of the invoice, the sender has all the data necessary to
     *     send a payment to the recipient.
     *     
     * @type {string}
     * @memberof Invoice
     */
    paymentRequest?: string;
    /**
     * 
     *     Hash(SHA-256) of a description of the payment. Used if the description of payment(memo) is too
     *     long to naturally fit within the description field of an encoded payment request.
     *     
     * @type {string}
     * @memberof Invoice
     */
    descriptionHash?: string;
    /**
     * Payment request expiry time in seconds. Default is 3600 (1 hour).
     * @type {number}
     * @memberof Invoice
     */
    expiry?: number;
    /**
     * Fallback on-chain address.
     * @type {string}
     * @memberof Invoice
     */
    fallbackAddr?: string;
    /**
     * Delta to use for the time-lock of the CLTV extended to the final hop.
     * @type {number}
     * @memberof Invoice
     */
    cltvExpiry?: number;
    /**
     * 
     *     Route hints that can each be individually used to assist in reaching the invoice's destination.
     *     
     * @type {Array<RouteHint>}
     * @memberof Invoice
     */
    routeHints?: Array<RouteHint>;
    /**
     * Whether this invoice should include routing hints for private channels.
     * @type {boolean}
     * @memberof Invoice
     */
    _private?: boolean;
    /**
     * 
     * The index of this invoice. Each newly created invoice will increment this index making it monotonically increasing.
     * CLN and LND handle ids differently. LND will generate an auto incremented integer id, while CLN will use a user supplied string id.
     * To unify both, we auto generate an id for CLN and use the add_index for LND.
     * 
     * For `LND` this will be an `integer` in string form. This is auto generated by LND.
     * 
     * For `CLN` this will be a `string`. If the invoice was generated by BlitzAPI, this will be a
     * [Firebase-like PushID](https://firebase.blog/posts/2015/02/the-2120-ways-to-ensure-unique_68).
     * If generated by some other method, it'll be the string supplied by the user at the time of creation of the invoice.
     * @type {string}
     * @memberof Invoice
     */
    addIndex: string;
    /**
     * 
     *         The "settle" index of this invoice. Each newly settled invoice will  increment this index making it monotonically increasing.
     *     
     * @type {number}
     * @memberof Invoice
     */
    settleIndex?: number;
    /**
     * 
     *     The amount that was accepted for this invoice, in satoshis. This
     *     will ONLY be set if this invoice has been settled. We provide
     *     this field as if the invoice was created with a zero value,
     *     then we need to record what amount was ultimately accepted.
     *     Additionally, it's possible that the sender paid MORE that
     *     was specified in the original invoice. So we'll record that here as well.
     *     
     * @type {number}
     * @memberof Invoice
     */
    amtPaidSat?: number;
    /**
     * 
     *     The amount that was accepted for this invoice, in millisatoshis.
     *     This will ONLY be set if this invoice has been settled. We
     *     provide this field as if the invoice was created with a zero value,
     *     then we need to record what amount was ultimately accepted. Additionally,
     *     it's possible that the sender paid MORE that was specified in the
     *     original invoice. So we'll record that here as well.
     *     
     * @type {number}
     * @memberof Invoice
     */
    amtPaidMsat?: number;
    /**
     * The state the invoice is in.
     * @type {InvoiceState}
     * @memberof Invoice
     */
    state: InvoiceState | null;
    /**
     * List of HTLCs paying to this invoice[EXPERIMENTAL].
     * @type {Array<InvoiceHTLC>}
     * @memberof Invoice
     */
    htlcs?: Array<InvoiceHTLC>;
    /**
     * List of features advertised on the invoice.
     * @type {Array<FeaturesEntry>}
     * @memberof Invoice
     */
    features?: Array<FeaturesEntry>;
    /**
     * [LND only] Indicates if this invoice was a spontaneous payment that arrived via keysend[EXPERIMENTAL].
     * @type {boolean}
     * @memberof Invoice
     */
    isKeysend?: boolean;
    /**
     *  The payment address of this invoice. This value will be used in MPP payments,
     *     and also for newer invoices that always require the MPP payload for added end-to-end security.
     * @type {string}
     * @memberof Invoice
     */
    paymentAddr?: string;
    /**
     * Signals whether or not this is an AMP invoice.
     * @type {boolean}
     * @memberof Invoice
     */
    isAmp?: boolean;
}

/**
 * Check if a given object implements the Invoice interface.
 */
export function instanceOfInvoice(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "valueMsat" in value;
    isInstance = isInstance && "addIndex" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'rPreimage': !exists(json, 'r_preimage') ? undefined : json['r_preimage'],
        'rHash': !exists(json, 'r_hash') ? undefined : json['r_hash'],
        'valueMsat': json['value_msat'],
        'settled': !exists(json, 'settled') ? undefined : json['settled'],
        'creationDate': !exists(json, 'creation_date') ? undefined : json['creation_date'],
        'settleDate': !exists(json, 'settle_date') ? undefined : json['settle_date'],
        'expiryDate': !exists(json, 'expiry_date') ? undefined : json['expiry_date'],
        'paymentRequest': !exists(json, 'payment_request') ? undefined : json['payment_request'],
        'descriptionHash': !exists(json, 'description_hash') ? undefined : json['description_hash'],
        'expiry': !exists(json, 'expiry') ? undefined : json['expiry'],
        'fallbackAddr': !exists(json, 'fallback_addr') ? undefined : json['fallback_addr'],
        'cltvExpiry': !exists(json, 'cltv_expiry') ? undefined : json['cltv_expiry'],
        'routeHints': !exists(json, 'route_hints') ? undefined : ((json['route_hints'] as Array<any>).map(RouteHintFromJSON)),
        '_private': !exists(json, 'private') ? undefined : json['private'],
        'addIndex': json['add_index'],
        'settleIndex': !exists(json, 'settle_index') ? undefined : json['settle_index'],
        'amtPaidSat': !exists(json, 'amt_paid_sat') ? undefined : json['amt_paid_sat'],
        'amtPaidMsat': !exists(json, 'amt_paid_msat') ? undefined : json['amt_paid_msat'],
        'state': InvoiceStateFromJSON(json['state']),
        'htlcs': !exists(json, 'htlcs') ? undefined : ((json['htlcs'] as Array<any>).map(InvoiceHTLCFromJSON)),
        'features': !exists(json, 'features') ? undefined : ((json['features'] as Array<any>).map(FeaturesEntryFromJSON)),
        'isKeysend': !exists(json, 'is_keysend') ? undefined : json['is_keysend'],
        'paymentAddr': !exists(json, 'payment_addr') ? undefined : json['payment_addr'],
        'isAmp': !exists(json, 'is_amp') ? undefined : json['is_amp'],
    };
}

export function InvoiceToJSON(value?: Invoice | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'memo': value.memo,
        'r_preimage': value.rPreimage,
        'r_hash': value.rHash,
        'value_msat': value.valueMsat,
        'settled': value.settled,
        'creation_date': value.creationDate,
        'settle_date': value.settleDate,
        'expiry_date': value.expiryDate,
        'payment_request': value.paymentRequest,
        'description_hash': value.descriptionHash,
        'expiry': value.expiry,
        'fallback_addr': value.fallbackAddr,
        'cltv_expiry': value.cltvExpiry,
        'route_hints': value.routeHints === undefined ? undefined : ((value.routeHints as Array<any>).map(RouteHintToJSON)),
        'private': value._private,
        'add_index': value.addIndex,
        'settle_index': value.settleIndex,
        'amt_paid_sat': value.amtPaidSat,
        'amt_paid_msat': value.amtPaidMsat,
        'state': InvoiceStateToJSON(value.state),
        'htlcs': value.htlcs === undefined ? undefined : ((value.htlcs as Array<any>).map(InvoiceHTLCToJSON)),
        'features': value.features === undefined ? undefined : ((value.features as Array<any>).map(FeaturesEntryToJSON)),
        'is_keysend': value.isKeysend,
        'payment_addr': value.paymentAddr,
        'is_amp': value.isAmp,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FeaturesEntry } from './FeaturesEntry';
import {
    FeaturesEntryFromJSON,
    FeaturesEntryFromJSONTyped,
    FeaturesEntryToJSON,
} from './FeaturesEntry';
import type { RouteHint } from './RouteHint';
import {
    RouteHintFromJSON,
    RouteHintFromJSONTyped,
    RouteHintToJSON,
} from './RouteHint';

/**
 * 
 * @export
 * @interface PaymentRequest
 */
export interface PaymentRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentRequest
     */
    destination: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentRequest
     */
    paymentHash: string;
    /**
     * Deprecated. User num_msat instead
     * @type {number}
     * @memberof PaymentRequest
     */
    numSatoshis?: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentRequest
     */
    timestamp: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentRequest
     */
    expiry: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentRequest
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentRequest
     */
    descriptionHash?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentRequest
     */
    fallbackAddr?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentRequest
     */
    cltvExpiry: number;
    /**
     * A list of [HopHint] for the RouteHint
     * @type {Array<RouteHint>}
     * @memberof PaymentRequest
     */
    routeHints?: Array<RouteHint>;
    /**
     * The payment address in hex format
     * @type {string}
     * @memberof PaymentRequest
     */
    paymentAddr?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentRequest
     */
    numMsat?: number;
    /**
     * 
     * @type {Array<FeaturesEntry>}
     * @memberof PaymentRequest
     */
    features?: Array<FeaturesEntry>;
    /**
     * Optional requested currency of the payment. 
     * @type {string}
     * @memberof PaymentRequest
     */
    currency?: string;
}

/**
 * Check if a given object implements the PaymentRequest interface.
 */
export function instanceOfPaymentRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "paymentHash" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "expiry" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "cltvExpiry" in value;

    return isInstance;
}

export function PaymentRequestFromJSON(json: any): PaymentRequest {
    return PaymentRequestFromJSONTyped(json, false);
}

export function PaymentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'destination': json['destination'],
        'paymentHash': json['payment_hash'],
        'numSatoshis': !exists(json, 'num_satoshis') ? undefined : json['num_satoshis'],
        'timestamp': json['timestamp'],
        'expiry': json['expiry'],
        'description': json['description'],
        'descriptionHash': !exists(json, 'description_hash') ? undefined : json['description_hash'],
        'fallbackAddr': !exists(json, 'fallback_addr') ? undefined : json['fallback_addr'],
        'cltvExpiry': json['cltv_expiry'],
        'routeHints': !exists(json, 'route_hints') ? undefined : ((json['route_hints'] as Array<any>).map(RouteHintFromJSON)),
        'paymentAddr': !exists(json, 'payment_addr') ? undefined : json['payment_addr'],
        'numMsat': !exists(json, 'num_msat') ? undefined : json['num_msat'],
        'features': !exists(json, 'features') ? undefined : ((json['features'] as Array<any>).map(FeaturesEntryFromJSON)),
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
    };
}

export function PaymentRequestToJSON(value?: PaymentRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'destination': value.destination,
        'payment_hash': value.paymentHash,
        'num_satoshis': value.numSatoshis,
        'timestamp': value.timestamp,
        'expiry': value.expiry,
        'description': value.description,
        'description_hash': value.descriptionHash,
        'fallback_addr': value.fallbackAddr,
        'cltv_expiry': value.cltvExpiry,
        'route_hints': value.routeHints === undefined ? undefined : ((value.routeHints as Array<any>).map(RouteHintToJSON)),
        'payment_addr': value.paymentAddr,
        'num_msat': value.numMsat,
        'features': value.features === undefined ? undefined : ((value.features as Array<any>).map(FeaturesEntryToJSON)),
        'currency': value.currency,
    };
}


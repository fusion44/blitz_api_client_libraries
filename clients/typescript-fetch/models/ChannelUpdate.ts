/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChannelUpdate
 */
export interface ChannelUpdate {
    /**
     * 
     * @type {string}
     * @memberof ChannelUpdate
     */
    signature: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelUpdate
     */
    chainHash: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelUpdate
     */
    chanId: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelUpdate
     */
    timestamp: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelUpdate
     */
    messageFlags: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelUpdate
     */
    channelFlags: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelUpdate
     */
    timeLockDelta: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelUpdate
     */
    htlcMinimumMsat: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelUpdate
     */
    baseFee: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelUpdate
     */
    feeRate: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelUpdate
     */
    htlcMaximumMsat: number;
    /**
     * 
     * @type {string}
     * @memberof ChannelUpdate
     */
    extraOpaqueData: string;
}

/**
 * Check if a given object implements the ChannelUpdate interface.
 */
export function instanceOfChannelUpdate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "signature" in value;
    isInstance = isInstance && "chainHash" in value;
    isInstance = isInstance && "chanId" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "messageFlags" in value;
    isInstance = isInstance && "channelFlags" in value;
    isInstance = isInstance && "timeLockDelta" in value;
    isInstance = isInstance && "htlcMinimumMsat" in value;
    isInstance = isInstance && "baseFee" in value;
    isInstance = isInstance && "feeRate" in value;
    isInstance = isInstance && "htlcMaximumMsat" in value;
    isInstance = isInstance && "extraOpaqueData" in value;

    return isInstance;
}

export function ChannelUpdateFromJSON(json: any): ChannelUpdate {
    return ChannelUpdateFromJSONTyped(json, false);
}

export function ChannelUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'signature': json['signature'],
        'chainHash': json['chain_hash'],
        'chanId': json['chan_id'],
        'timestamp': json['timestamp'],
        'messageFlags': json['message_flags'],
        'channelFlags': json['channel_flags'],
        'timeLockDelta': json['time_lock_delta'],
        'htlcMinimumMsat': json['htlc_minimum_msat'],
        'baseFee': json['base_fee'],
        'feeRate': json['fee_rate'],
        'htlcMaximumMsat': json['htlc_maximum_msat'],
        'extraOpaqueData': json['extra_opaque_data'],
    };
}

export function ChannelUpdateToJSON(value?: ChannelUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'signature': value.signature,
        'chain_hash': value.chainHash,
        'chan_id': value.chanId,
        'timestamp': value.timestamp,
        'message_flags': value.messageFlags,
        'channel_flags': value.channelFlags,
        'time_lock_delta': value.timeLockDelta,
        'htlc_minimum_msat': value.htlcMinimumMsat,
        'base_fee': value.baseFee,
        'fee_rate': value.feeRate,
        'htlc_maximum_msat': value.htlcMaximumMsat,
        'extra_opaque_data': value.extraOpaqueData,
    };
}


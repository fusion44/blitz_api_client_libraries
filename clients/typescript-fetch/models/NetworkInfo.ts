/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BtcLocalAddress } from './BtcLocalAddress';
import {
    BtcLocalAddressFromJSON,
    BtcLocalAddressFromJSONTyped,
    BtcLocalAddressToJSON,
} from './BtcLocalAddress';
import type { BtcNetwork } from './BtcNetwork';
import {
    BtcNetworkFromJSON,
    BtcNetworkFromJSONTyped,
    BtcNetworkToJSON,
} from './BtcNetwork';

/**
 * 
 * @export
 * @interface NetworkInfo
 */
export interface NetworkInfo {
    /**
     * The bitcoin core server version
     * @type {number}
     * @memberof NetworkInfo
     */
    version: number;
    /**
     * The server subversion string
     * @type {string}
     * @memberof NetworkInfo
     */
    subversion: string;
    /**
     * The protocol version
     * @type {number}
     * @memberof NetworkInfo
     */
    protocolVersion: number;
    /**
     * The services we offer to the network, hex formatted
     * @type {string}
     * @memberof NetworkInfo
     */
    localServices?: string;
    /**
     * The services we offer to the network, in human-readable form
     * @type {Array<string>}
     * @memberof NetworkInfo
     */
    localServicesNames?: Array<string>;
    /**
     * True if transaction relay is requested from peers
     * @type {boolean}
     * @memberof NetworkInfo
     */
    localRelay: boolean;
    /**
     * The time offset
     * @type {number}
     * @memberof NetworkInfo
     */
    timeOffset: number;
    /**
     * The total number of connections
     * @type {number}
     * @memberof NetworkInfo
     */
    connections: number;
    /**
     * The number of inbound connections
     * @type {number}
     * @memberof NetworkInfo
     */
    connectionsIn: number;
    /**
     * The number of outbound connections
     * @type {number}
     * @memberof NetworkInfo
     */
    connectionsOut: number;
    /**
     * Whether p2p networking is enabled
     * @type {boolean}
     * @memberof NetworkInfo
     */
    networkActive: boolean;
    /**
     * Information per network
     * @type {Array<BtcNetwork>}
     * @memberof NetworkInfo
     */
    networks: Array<BtcNetwork>;
    /**
     * Minimum relay fee for transactions in BTC/kB
     * @type {number}
     * @memberof NetworkInfo
     */
    relayFee: number;
    /**
     * Minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB
     * @type {number}
     * @memberof NetworkInfo
     */
    incrementalFee: number;
    /**
     * List of local addresses
     * @type {Array<BtcLocalAddress>}
     * @memberof NetworkInfo
     */
    localAddresses?: Array<BtcLocalAddress>;
    /**
     * Any network and blockchain warnings
     * @type {string}
     * @memberof NetworkInfo
     */
    warnings?: string;
}

/**
 * Check if a given object implements the NetworkInfo interface.
 */
export function instanceOfNetworkInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "subversion" in value;
    isInstance = isInstance && "protocolVersion" in value;
    isInstance = isInstance && "localRelay" in value;
    isInstance = isInstance && "timeOffset" in value;
    isInstance = isInstance && "connections" in value;
    isInstance = isInstance && "connectionsIn" in value;
    isInstance = isInstance && "connectionsOut" in value;
    isInstance = isInstance && "networkActive" in value;
    isInstance = isInstance && "networks" in value;
    isInstance = isInstance && "relayFee" in value;
    isInstance = isInstance && "incrementalFee" in value;

    return isInstance;
}

export function NetworkInfoFromJSON(json: any): NetworkInfo {
    return NetworkInfoFromJSONTyped(json, false);
}

export function NetworkInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): NetworkInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'subversion': json['subversion'],
        'protocolVersion': json['protocol_version'],
        'localServices': !exists(json, 'local_services') ? undefined : json['local_services'],
        'localServicesNames': !exists(json, 'local_services_names') ? undefined : json['local_services_names'],
        'localRelay': json['local_relay'],
        'timeOffset': json['time_offset'],
        'connections': json['connections'],
        'connectionsIn': json['connections_in'],
        'connectionsOut': json['connections_out'],
        'networkActive': json['network_active'],
        'networks': ((json['networks'] as Array<any>).map(BtcNetworkFromJSON)),
        'relayFee': json['relay_fee'],
        'incrementalFee': json['incremental_fee'],
        'localAddresses': !exists(json, 'local_addresses') ? undefined : ((json['local_addresses'] as Array<any>).map(BtcLocalAddressFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : json['warnings'],
    };
}

export function NetworkInfoToJSON(value?: NetworkInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'subversion': value.subversion,
        'protocol_version': value.protocolVersion,
        'local_services': value.localServices,
        'local_services_names': value.localServicesNames,
        'local_relay': value.localRelay,
        'time_offset': value.timeOffset,
        'connections': value.connections,
        'connections_in': value.connectionsIn,
        'connections_out': value.connectionsOut,
        'network_active': value.networkActive,
        'networks': ((value.networks as Array<any>).map(BtcNetworkToJSON)),
        'relay_fee': value.relayFee,
        'incremental_fee': value.incrementalFee,
        'local_addresses': value.localAddresses === undefined ? undefined : ((value.localAddresses as Array<any>).map(BtcLocalAddressToJSON)),
        'warnings': value.warnings,
    };
}


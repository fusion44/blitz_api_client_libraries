/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Chain } from './Chain';
import {
    ChainFromJSON,
    ChainFromJSONTyped,
    ChainToJSON,
} from './Chain';
import type { FeaturesEntry } from './FeaturesEntry';
import {
    FeaturesEntryFromJSON,
    FeaturesEntryFromJSONTyped,
    FeaturesEntryToJSON,
} from './FeaturesEntry';

/**
 * 
 * @export
 * @interface LnInfo
 */
export interface LnInfo {
    /**
     * Lightning software implementation (LND, CLN)
     * @type {string}
     * @memberof LnInfo
     */
    implementation: string;
    /**
     * The version of the software that the node is running.
     * @type {string}
     * @memberof LnInfo
     */
    version: string;
    /**
     * The SHA1 commit hash that the daemon is compiled with.
     * @type {string}
     * @memberof LnInfo
     */
    commitHash: string;
    /**
     * 
     * @type {string}
     * @memberof LnInfo
     */
    identityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof LnInfo
     */
    identityUri?: string;
    /**
     * The alias of the node.
     * @type {string}
     * @memberof LnInfo
     */
    alias: string;
    /**
     * The color of the current node in hex code format.
     * @type {string}
     * @memberof LnInfo
     */
    color: string;
    /**
     * Number of pending channels.
     * @type {number}
     * @memberof LnInfo
     */
    numPendingChannels: number;
    /**
     * Number of active channels.
     * @type {number}
     * @memberof LnInfo
     */
    numActiveChannels: number;
    /**
     * Number of inactive channels.
     * @type {number}
     * @memberof LnInfo
     */
    numInactiveChannels: number;
    /**
     * Number of peers.
     * @type {number}
     * @memberof LnInfo
     */
    numPeers: number;
    /**
     * The node's current view of the height of the best block. Only available with LND.
     * @type {number}
     * @memberof LnInfo
     */
    blockHeight: number;
    /**
     * The node's current view of the hash of the best block. Only available with LND.
     * @type {string}
     * @memberof LnInfo
     */
    blockHash?: string;
    /**
     * Timestamp of the block best known to the wallet. Only available with LND.
     * @type {number}
     * @memberof LnInfo
     */
    bestHeaderTimestamp?: number;
    /**
     * Whether the wallet's view is synced to the main chain. Only available with LND.
     * @type {boolean}
     * @memberof LnInfo
     */
    syncedToChain?: boolean;
    /**
     * Whether we consider ourselves synced with the public channel graph. Only available with LND.
     * @type {boolean}
     * @memberof LnInfo
     */
    syncedToGraph?: boolean;
    /**
     * A list of active chains the node is connected to
     * @type {Array<Chain>}
     * @memberof LnInfo
     */
    chains?: Array<Chain>;
    /**
     * The URIs of the current node.
     * @type {Array<string>}
     * @memberof LnInfo
     */
    uris?: Array<string>;
    /**
     * Features that our node has advertised in our init message node announcements and invoices. Not yet implemented with CLN
     * @type {Array<FeaturesEntry>}
     * @memberof LnInfo
     */
    features?: Array<FeaturesEntry>;
}

/**
 * Check if a given object implements the LnInfo interface.
 */
export function instanceOfLnInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "implementation" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "commitHash" in value;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "color" in value;
    isInstance = isInstance && "numPendingChannels" in value;
    isInstance = isInstance && "numActiveChannels" in value;
    isInstance = isInstance && "numInactiveChannels" in value;
    isInstance = isInstance && "numPeers" in value;
    isInstance = isInstance && "blockHeight" in value;

    return isInstance;
}

export function LnInfoFromJSON(json: any): LnInfo {
    return LnInfoFromJSONTyped(json, false);
}

export function LnInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LnInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'implementation': json['implementation'],
        'version': json['version'],
        'commitHash': json['commit_hash'],
        'identityPubkey': !exists(json, 'identity_pubkey') ? undefined : json['identity_pubkey'],
        'identityUri': !exists(json, 'identity_uri') ? undefined : json['identity_uri'],
        'alias': json['alias'],
        'color': json['color'],
        'numPendingChannels': json['num_pending_channels'],
        'numActiveChannels': json['num_active_channels'],
        'numInactiveChannels': json['num_inactive_channels'],
        'numPeers': json['num_peers'],
        'blockHeight': json['block_height'],
        'blockHash': !exists(json, 'block_hash') ? undefined : json['block_hash'],
        'bestHeaderTimestamp': !exists(json, 'best_header_timestamp') ? undefined : json['best_header_timestamp'],
        'syncedToChain': !exists(json, 'synced_to_chain') ? undefined : json['synced_to_chain'],
        'syncedToGraph': !exists(json, 'synced_to_graph') ? undefined : json['synced_to_graph'],
        'chains': !exists(json, 'chains') ? undefined : ((json['chains'] as Array<any>).map(ChainFromJSON)),
        'uris': !exists(json, 'uris') ? undefined : json['uris'],
        'features': !exists(json, 'features') ? undefined : ((json['features'] as Array<any>).map(FeaturesEntryFromJSON)),
    };
}

export function LnInfoToJSON(value?: LnInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'implementation': value.implementation,
        'version': value.version,
        'commit_hash': value.commitHash,
        'identity_pubkey': value.identityPubkey,
        'identity_uri': value.identityUri,
        'alias': value.alias,
        'color': value.color,
        'num_pending_channels': value.numPendingChannels,
        'num_active_channels': value.numActiveChannels,
        'num_inactive_channels': value.numInactiveChannels,
        'num_peers': value.numPeers,
        'block_height': value.blockHeight,
        'block_hash': value.blockHash,
        'best_header_timestamp': value.bestHeaderTimestamp,
        'synced_to_chain': value.syncedToChain,
        'synced_to_graph': value.syncedToGraph,
        'chains': value.chains === undefined ? undefined : ((value.chains as Array<any>).map(ChainToJSON)),
        'uris': value.uris,
        'features': value.features === undefined ? undefined : ((value.features as Array<any>).map(FeaturesEntryToJSON)),
    };
}


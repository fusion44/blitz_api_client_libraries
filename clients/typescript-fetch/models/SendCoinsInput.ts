/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SendCoinsInput
 */
export interface SendCoinsInput {
    /**
     * The base58 or bech32 encoded bitcoin address to send coins to on-chain
     * @type {string}
     * @memberof SendCoinsInput
     */
    address: string;
    /**
     * The number of bitcoin denominated in satoshis to send
     * @type {number}
     * @memberof SendCoinsInput
     */
    amount: number;
    /**
     * The number of blocks that the transaction *should* confirm in, will be used for fee estimation
     * @type {number}
     * @memberof SendCoinsInput
     */
    targetConf?: number;
    /**
     * A manual fee expressed in sat/vbyte that should be used when crafting the transaction (default: 0)
     * @type {number}
     * @memberof SendCoinsInput
     */
    satPerVbyte?: number;
    /**
     * The minimum number of confirmations each one of your outputs used for the transaction must satisfy
     * @type {number}
     * @memberof SendCoinsInput
     */
    minConfs?: number;
    /**
     * A label for the transaction. Ignored by CLN backend.
     * @type {string}
     * @memberof SendCoinsInput
     */
    label?: string;
}

/**
 * Check if a given object implements the SendCoinsInput interface.
 */
export function instanceOfSendCoinsInput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "amount" in value;

    return isInstance;
}

export function SendCoinsInputFromJSON(json: any): SendCoinsInput {
    return SendCoinsInputFromJSONTyped(json, false);
}

export function SendCoinsInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): SendCoinsInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'amount': json['amount'],
        'targetConf': !exists(json, 'target_conf') ? undefined : json['target_conf'],
        'satPerVbyte': !exists(json, 'sat_per_vbyte') ? undefined : json['sat_per_vbyte'],
        'minConfs': !exists(json, 'min_confs') ? undefined : json['min_confs'],
        'label': !exists(json, 'label') ? undefined : json['label'],
    };
}

export function SendCoinsInputToJSON(value?: SendCoinsInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'amount': value.amount,
        'target_conf': value.targetConf,
        'sat_per_vbyte': value.satPerVbyte,
        'min_confs': value.minConfs,
        'label': value.label,
    };
}


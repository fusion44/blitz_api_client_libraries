/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UninstallData struct for UninstallData
type UninstallData struct {
	KeepData *bool `json:"keepData,omitempty"`
}

// NewUninstallData instantiates a new UninstallData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUninstallData() *UninstallData {
	this := UninstallData{}
	var keepData bool = true
	this.KeepData = &keepData
	return &this
}

// NewUninstallDataWithDefaults instantiates a new UninstallData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUninstallDataWithDefaults() *UninstallData {
	this := UninstallData{}
	var keepData bool = true
	this.KeepData = &keepData
	return &this
}

// GetKeepData returns the KeepData field value if set, zero value otherwise.
func (o *UninstallData) GetKeepData() bool {
	if o == nil || o.KeepData == nil {
		var ret bool
		return ret
	}
	return *o.KeepData
}

// GetKeepDataOk returns a tuple with the KeepData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UninstallData) GetKeepDataOk() (*bool, bool) {
	if o == nil || o.KeepData == nil {
		return nil, false
	}
	return o.KeepData, true
}

// HasKeepData returns a boolean if a field has been set.
func (o *UninstallData) HasKeepData() bool {
	if o != nil && o.KeepData != nil {
		return true
	}

	return false
}

// SetKeepData gets a reference to the given bool and assigns it to the KeepData field.
func (o *UninstallData) SetKeepData(v bool) {
	o.KeepData = &v
}

func (o UninstallData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeepData != nil {
		toSerialize["keepData"] = o.KeepData
	}
	return json.Marshal(toSerialize)
}

type NullableUninstallData struct {
	value *UninstallData
	isSet bool
}

func (v NullableUninstallData) Get() *UninstallData {
	return v.value
}

func (v *NullableUninstallData) Set(val *UninstallData) {
	v.value = val
	v.isSet = true
}

func (v NullableUninstallData) IsSet() bool {
	return v.isSet
}

func (v *NullableUninstallData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUninstallData(val *UninstallData) *NullableUninstallData {
	return &NullableUninstallData{value: val, isSet: true}
}

func (v NullableUninstallData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUninstallData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InvoiceState An enumeration.
type InvoiceState string

// List of InvoiceState
const (
	OPEN InvoiceState = "open"
	SETTLED InvoiceState = "settled"
	CANCELED InvoiceState = "canceled"
	ACCEPTED InvoiceState = "accepted"
)

// All allowed values of InvoiceState enum
var AllowedInvoiceStateEnumValues = []InvoiceState{
	"open",
	"settled",
	"canceled",
	"accepted",
}

func (v *InvoiceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvoiceState(value)
	for _, existing := range AllowedInvoiceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InvoiceState", value)
}

// NewInvoiceStateFromValue returns a pointer to a valid InvoiceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvoiceStateFromValue(v string) (*InvoiceState, error) {
	ev := InvoiceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvoiceState: valid values are %v", v, AllowedInvoiceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvoiceState) IsValid() bool {
	for _, existing := range AllowedInvoiceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvoiceState value
func (v InvoiceState) Ptr() *InvoiceState {
	return &v
}

type NullableInvoiceState struct {
	value *InvoiceState
	isSet bool
}

func (v NullableInvoiceState) Get() *InvoiceState {
	return v.value
}

func (v *NullableInvoiceState) Set(val *InvoiceState) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceState) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceState(val *InvoiceState) *NullableInvoiceState {
	return &NullableInvoiceState{value: val, isSet: true}
}

func (v NullableInvoiceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BtcInfo struct for BtcInfo
type BtcInfo struct {
	// The height of the most-work fully-validated chain. The genesis block has height 0
	Blocks int32 `json:"blocks"`
	// The current number of headers we have validated
	Headers int32 `json:"headers"`
	// Estimate of verification progress[0..1]
	VerificationProgress float32 `json:"verification_progress"`
	// The current difficulty
	Difficulty int32 `json:"difficulty"`
	// The estimated size of the block and undo files on disk
	SizeOnDisk int32 `json:"size_on_disk"`
	// Which networks are in use (ipv4, ipv6 or onion)
	Networks []BtcNetwork `json:"networks,omitempty"`
	// The bitcoin core server version
	Version int32 `json:"version"`
	// The server subversion string
	Subversion string `json:"subversion"`
	// The number of inbound connections
	ConnectionsIn int32 `json:"connections_in"`
	// The number of outbound connections
	ConnectionsOut int32 `json:"connections_out"`
}

// NewBtcInfo instantiates a new BtcInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBtcInfo(blocks int32, headers int32, verificationProgress float32, difficulty int32, sizeOnDisk int32, version int32, subversion string, connectionsIn int32, connectionsOut int32) *BtcInfo {
	this := BtcInfo{}
	this.Blocks = blocks
	this.Headers = headers
	this.VerificationProgress = verificationProgress
	this.Difficulty = difficulty
	this.SizeOnDisk = sizeOnDisk
	this.Version = version
	this.Subversion = subversion
	this.ConnectionsIn = connectionsIn
	this.ConnectionsOut = connectionsOut
	return &this
}

// NewBtcInfoWithDefaults instantiates a new BtcInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBtcInfoWithDefaults() *BtcInfo {
	this := BtcInfo{}
	return &this
}

// GetBlocks returns the Blocks field value
func (o *BtcInfo) GetBlocks() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetBlocksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blocks, true
}

// SetBlocks sets field value
func (o *BtcInfo) SetBlocks(v int32) {
	o.Blocks = v
}

// GetHeaders returns the Headers field value
func (o *BtcInfo) GetHeaders() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetHeadersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *BtcInfo) SetHeaders(v int32) {
	o.Headers = v
}

// GetVerificationProgress returns the VerificationProgress field value
func (o *BtcInfo) GetVerificationProgress() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VerificationProgress
}

// GetVerificationProgressOk returns a tuple with the VerificationProgress field value
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetVerificationProgressOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VerificationProgress, true
}

// SetVerificationProgress sets field value
func (o *BtcInfo) SetVerificationProgress(v float32) {
	o.VerificationProgress = v
}

// GetDifficulty returns the Difficulty field value
func (o *BtcInfo) GetDifficulty() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Difficulty
}

// GetDifficultyOk returns a tuple with the Difficulty field value
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetDifficultyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Difficulty, true
}

// SetDifficulty sets field value
func (o *BtcInfo) SetDifficulty(v int32) {
	o.Difficulty = v
}

// GetSizeOnDisk returns the SizeOnDisk field value
func (o *BtcInfo) GetSizeOnDisk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SizeOnDisk
}

// GetSizeOnDiskOk returns a tuple with the SizeOnDisk field value
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetSizeOnDiskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeOnDisk, true
}

// SetSizeOnDisk sets field value
func (o *BtcInfo) SetSizeOnDisk(v int32) {
	o.SizeOnDisk = v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *BtcInfo) GetNetworks() []BtcNetwork {
	if o == nil || o.Networks == nil {
		var ret []BtcNetwork
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetNetworksOk() ([]BtcNetwork, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *BtcInfo) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []BtcNetwork and assigns it to the Networks field.
func (o *BtcInfo) SetNetworks(v []BtcNetwork) {
	o.Networks = v
}

// GetVersion returns the Version field value
func (o *BtcInfo) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *BtcInfo) SetVersion(v int32) {
	o.Version = v
}

// GetSubversion returns the Subversion field value
func (o *BtcInfo) GetSubversion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subversion
}

// GetSubversionOk returns a tuple with the Subversion field value
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetSubversionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subversion, true
}

// SetSubversion sets field value
func (o *BtcInfo) SetSubversion(v string) {
	o.Subversion = v
}

// GetConnectionsIn returns the ConnectionsIn field value
func (o *BtcInfo) GetConnectionsIn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConnectionsIn
}

// GetConnectionsInOk returns a tuple with the ConnectionsIn field value
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetConnectionsInOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionsIn, true
}

// SetConnectionsIn sets field value
func (o *BtcInfo) SetConnectionsIn(v int32) {
	o.ConnectionsIn = v
}

// GetConnectionsOut returns the ConnectionsOut field value
func (o *BtcInfo) GetConnectionsOut() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConnectionsOut
}

// GetConnectionsOutOk returns a tuple with the ConnectionsOut field value
// and a boolean to check if the value has been set.
func (o *BtcInfo) GetConnectionsOutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionsOut, true
}

// SetConnectionsOut sets field value
func (o *BtcInfo) SetConnectionsOut(v int32) {
	o.ConnectionsOut = v
}

func (o BtcInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blocks"] = o.Blocks
	}
	if true {
		toSerialize["headers"] = o.Headers
	}
	if true {
		toSerialize["verification_progress"] = o.VerificationProgress
	}
	if true {
		toSerialize["difficulty"] = o.Difficulty
	}
	if true {
		toSerialize["size_on_disk"] = o.SizeOnDisk
	}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["subversion"] = o.Subversion
	}
	if true {
		toSerialize["connections_in"] = o.ConnectionsIn
	}
	if true {
		toSerialize["connections_out"] = o.ConnectionsOut
	}
	return json.Marshal(toSerialize)
}

type NullableBtcInfo struct {
	value *BtcInfo
	isSet bool
}

func (v NullableBtcInfo) Get() *BtcInfo {
	return v.value
}

func (v *NullableBtcInfo) Set(val *BtcInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBtcInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBtcInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBtcInfo(val *BtcInfo) *NullableBtcInfo {
	return &NullableBtcInfo{value: val, isSet: true}
}

func (v NullableBtcInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBtcInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



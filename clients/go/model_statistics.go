/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Statistics numeric statistics about BIP9 signalling for a softfork(only for `started` status)
type Statistics struct {
	// The length in blocks of the BIP9 signalling period
	Period int32 `json:"period"`
	// The number of blocks with the version bit set required to activate the feature
	Threshold int32 `json:"threshold"`
	// The number of blocks elapsed since the beginning of the current period
	Elapsed int32 `json:"elapsed"`
	// The number of blocks with the version bit set in the current period
	Count int32 `json:"count"`
	// False if there are not enough blocks left in this period to pass activation threshold
	Possible bool `json:"possible"`
}

// NewStatistics instantiates a new Statistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatistics(period int32, threshold int32, elapsed int32, count int32, possible bool) *Statistics {
	this := Statistics{}
	this.Period = period
	this.Threshold = threshold
	this.Elapsed = elapsed
	this.Count = count
	this.Possible = possible
	return &this
}

// NewStatisticsWithDefaults instantiates a new Statistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticsWithDefaults() *Statistics {
	this := Statistics{}
	return &this
}

// GetPeriod returns the Period field value
func (o *Statistics) GetPeriod() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *Statistics) GetPeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *Statistics) SetPeriod(v int32) {
	o.Period = v
}

// GetThreshold returns the Threshold field value
func (o *Statistics) GetThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *Statistics) GetThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *Statistics) SetThreshold(v int32) {
	o.Threshold = v
}

// GetElapsed returns the Elapsed field value
func (o *Statistics) GetElapsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Elapsed
}

// GetElapsedOk returns a tuple with the Elapsed field value
// and a boolean to check if the value has been set.
func (o *Statistics) GetElapsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Elapsed, true
}

// SetElapsed sets field value
func (o *Statistics) SetElapsed(v int32) {
	o.Elapsed = v
}

// GetCount returns the Count field value
func (o *Statistics) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Statistics) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Statistics) SetCount(v int32) {
	o.Count = v
}

// GetPossible returns the Possible field value
func (o *Statistics) GetPossible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Possible
}

// GetPossibleOk returns a tuple with the Possible field value
// and a boolean to check if the value has been set.
func (o *Statistics) GetPossibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Possible, true
}

// SetPossible sets field value
func (o *Statistics) SetPossible(v bool) {
	o.Possible = v
}

func (o Statistics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["period"] = o.Period
	}
	if true {
		toSerialize["threshold"] = o.Threshold
	}
	if true {
		toSerialize["elapsed"] = o.Elapsed
	}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["possible"] = o.Possible
	}
	return json.Marshal(toSerialize)
}

type NullableStatistics struct {
	value *Statistics
	isSet bool
}

func (v NullableStatistics) Get() *Statistics {
	return v.value
}

func (v *NullableStatistics) Set(val *Statistics) {
	v.value = val
	v.isSet = true
}

func (v NullableStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatistics(val *Statistics) *NullableStatistics {
	return &NullableStatistics{value: val, isSet: true}
}

func (v NullableStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OnChainTransaction struct for OnChainTransaction
type OnChainTransaction struct {
	// The transaction hash
	TxHash string `json:"tx_hash"`
	// The transaction amount, denominated in satoshis
	Amount int32 `json:"amount"`
	// The number of confirmations
	NumConfirmations int32 `json:"num_confirmations"`
	// The height of the block this transaction was included in
	BlockHeight int32 `json:"block_height"`
	// Timestamp of this transaction
	TimeStamp int32 `json:"time_stamp"`
	// Fees paid for this transaction
	TotalFees int32 `json:"total_fees"`
	// Addresses that received funds for this transaction
	DestAddresses []string `json:"dest_addresses,omitempty"`
	// An optional label that was set on transaction broadcast.
	Label *string `json:"label,omitempty"`
}

// NewOnChainTransaction instantiates a new OnChainTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnChainTransaction(txHash string, amount int32, numConfirmations int32, blockHeight int32, timeStamp int32, totalFees int32) *OnChainTransaction {
	this := OnChainTransaction{}
	this.TxHash = txHash
	this.Amount = amount
	this.NumConfirmations = numConfirmations
	this.BlockHeight = blockHeight
	this.TimeStamp = timeStamp
	this.TotalFees = totalFees
	var label string = ""
	this.Label = &label
	return &this
}

// NewOnChainTransactionWithDefaults instantiates a new OnChainTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnChainTransactionWithDefaults() *OnChainTransaction {
	this := OnChainTransaction{}
	var label string = ""
	this.Label = &label
	return &this
}

// GetTxHash returns the TxHash field value
func (o *OnChainTransaction) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *OnChainTransaction) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *OnChainTransaction) SetTxHash(v string) {
	o.TxHash = v
}

// GetAmount returns the Amount field value
func (o *OnChainTransaction) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *OnChainTransaction) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *OnChainTransaction) SetAmount(v int32) {
	o.Amount = v
}

// GetNumConfirmations returns the NumConfirmations field value
func (o *OnChainTransaction) GetNumConfirmations() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumConfirmations
}

// GetNumConfirmationsOk returns a tuple with the NumConfirmations field value
// and a boolean to check if the value has been set.
func (o *OnChainTransaction) GetNumConfirmationsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumConfirmations, true
}

// SetNumConfirmations sets field value
func (o *OnChainTransaction) SetNumConfirmations(v int32) {
	o.NumConfirmations = v
}

// GetBlockHeight returns the BlockHeight field value
func (o *OnChainTransaction) GetBlockHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockHeight
}

// GetBlockHeightOk returns a tuple with the BlockHeight field value
// and a boolean to check if the value has been set.
func (o *OnChainTransaction) GetBlockHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHeight, true
}

// SetBlockHeight sets field value
func (o *OnChainTransaction) SetBlockHeight(v int32) {
	o.BlockHeight = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *OnChainTransaction) GetTimeStamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *OnChainTransaction) GetTimeStampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *OnChainTransaction) SetTimeStamp(v int32) {
	o.TimeStamp = v
}

// GetTotalFees returns the TotalFees field value
func (o *OnChainTransaction) GetTotalFees() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalFees
}

// GetTotalFeesOk returns a tuple with the TotalFees field value
// and a boolean to check if the value has been set.
func (o *OnChainTransaction) GetTotalFeesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFees, true
}

// SetTotalFees sets field value
func (o *OnChainTransaction) SetTotalFees(v int32) {
	o.TotalFees = v
}

// GetDestAddresses returns the DestAddresses field value if set, zero value otherwise.
func (o *OnChainTransaction) GetDestAddresses() []string {
	if o == nil || o.DestAddresses == nil {
		var ret []string
		return ret
	}
	return o.DestAddresses
}

// GetDestAddressesOk returns a tuple with the DestAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnChainTransaction) GetDestAddressesOk() ([]string, bool) {
	if o == nil || o.DestAddresses == nil {
		return nil, false
	}
	return o.DestAddresses, true
}

// HasDestAddresses returns a boolean if a field has been set.
func (o *OnChainTransaction) HasDestAddresses() bool {
	if o != nil && o.DestAddresses != nil {
		return true
	}

	return false
}

// SetDestAddresses gets a reference to the given []string and assigns it to the DestAddresses field.
func (o *OnChainTransaction) SetDestAddresses(v []string) {
	o.DestAddresses = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *OnChainTransaction) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnChainTransaction) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *OnChainTransaction) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *OnChainTransaction) SetLabel(v string) {
	o.Label = &v
}

func (o OnChainTransaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tx_hash"] = o.TxHash
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["num_confirmations"] = o.NumConfirmations
	}
	if true {
		toSerialize["block_height"] = o.BlockHeight
	}
	if true {
		toSerialize["time_stamp"] = o.TimeStamp
	}
	if true {
		toSerialize["total_fees"] = o.TotalFees
	}
	if o.DestAddresses != nil {
		toSerialize["dest_addresses"] = o.DestAddresses
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	return json.Marshal(toSerialize)
}

type NullableOnChainTransaction struct {
	value *OnChainTransaction
	isSet bool
}

func (v NullableOnChainTransaction) Get() *OnChainTransaction {
	return v.value
}

func (v *NullableOnChainTransaction) Set(val *OnChainTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableOnChainTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableOnChainTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnChainTransaction(val *OnChainTransaction) *NullableOnChainTransaction {
	return &NullableOnChainTransaction{value: val, isSet: true}
}

func (v NullableOnChainTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnChainTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



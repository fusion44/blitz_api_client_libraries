/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FeeEstimationMode An enumeration.
type FeeEstimationMode string

// List of FeeEstimationMode
const (
	CONSERVATIVE FeeEstimationMode = "conservative"
	ECONOMICAL FeeEstimationMode = "economical"
)

// All allowed values of FeeEstimationMode enum
var AllowedFeeEstimationModeEnumValues = []FeeEstimationMode{
	"conservative",
	"economical",
}

func (v *FeeEstimationMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeeEstimationMode(value)
	for _, existing := range AllowedFeeEstimationModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeeEstimationMode", value)
}

// NewFeeEstimationModeFromValue returns a pointer to a valid FeeEstimationMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeeEstimationModeFromValue(v string) (*FeeEstimationMode, error) {
	ev := FeeEstimationMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeeEstimationMode: valid values are %v", v, AllowedFeeEstimationModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeeEstimationMode) IsValid() bool {
	for _, existing := range AllowedFeeEstimationModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeeEstimationMode value
func (v FeeEstimationMode) Ptr() *FeeEstimationMode {
	return &v
}

type NullableFeeEstimationMode struct {
	value *FeeEstimationMode
	isSet bool
}

func (v NullableFeeEstimationMode) Get() *FeeEstimationMode {
	return v.value
}

func (v *NullableFeeEstimationMode) Set(val *FeeEstimationMode) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeEstimationMode) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeEstimationMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeEstimationMode(val *FeeEstimationMode) *NullableFeeEstimationMode {
	return &NullableFeeEstimationMode{value: val, isSet: true}
}

func (v NullableFeeEstimationMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeEstimationMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


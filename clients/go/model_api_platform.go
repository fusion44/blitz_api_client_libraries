/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// APIPlatform An enumeration.
type APIPlatform string

// List of APIPlatform
const (
	RASPIBLITZ APIPlatform = "raspiblitz"
	NATIVE_PYTHON APIPlatform = "native_python"
	UNKNOWN APIPlatform = "unknown"
)

// All allowed values of APIPlatform enum
var AllowedAPIPlatformEnumValues = []APIPlatform{
	"raspiblitz",
	"native_python",
	"unknown",
}

func (v *APIPlatform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := APIPlatform(value)
	for _, existing := range AllowedAPIPlatformEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid APIPlatform", value)
}

// NewAPIPlatformFromValue returns a pointer to a valid APIPlatform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAPIPlatformFromValue(v string) (*APIPlatform, error) {
	ev := APIPlatform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for APIPlatform: valid values are %v", v, AllowedAPIPlatformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v APIPlatform) IsValid() bool {
	for _, existing := range AllowedAPIPlatformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to APIPlatform value
func (v APIPlatform) Ptr() *APIPlatform {
	return &v
}

type NullableAPIPlatform struct {
	value *APIPlatform
	isSet bool
}

func (v NullableAPIPlatform) Get() *APIPlatform {
	return v.value
}

func (v *NullableAPIPlatform) Set(val *APIPlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIPlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIPlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIPlatform(val *APIPlatform) *NullableAPIPlatform {
	return &NullableAPIPlatform{value: val, isSet: true}
}

func (v NullableAPIPlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIPlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


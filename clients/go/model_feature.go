/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Feature struct for Feature
type Feature struct {
	Name string `json:"name"`
	IsRequired *bool `json:"is_required,omitempty"`
	IsKnown *bool `json:"is_known,omitempty"`
}

// NewFeature instantiates a new Feature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeature(name string) *Feature {
	this := Feature{}
	this.Name = name
	return &this
}

// NewFeatureWithDefaults instantiates a new Feature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureWithDefaults() *Feature {
	this := Feature{}
	return &this
}

// GetName returns the Name field value
func (o *Feature) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Feature) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Feature) SetName(v string) {
	o.Name = v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *Feature) GetIsRequired() bool {
	if o == nil || o.IsRequired == nil {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetIsRequiredOk() (*bool, bool) {
	if o == nil || o.IsRequired == nil {
		return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *Feature) HasIsRequired() bool {
	if o != nil && o.IsRequired != nil {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *Feature) SetIsRequired(v bool) {
	o.IsRequired = &v
}

// GetIsKnown returns the IsKnown field value if set, zero value otherwise.
func (o *Feature) GetIsKnown() bool {
	if o == nil || o.IsKnown == nil {
		var ret bool
		return ret
	}
	return *o.IsKnown
}

// GetIsKnownOk returns a tuple with the IsKnown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetIsKnownOk() (*bool, bool) {
	if o == nil || o.IsKnown == nil {
		return nil, false
	}
	return o.IsKnown, true
}

// HasIsKnown returns a boolean if a field has been set.
func (o *Feature) HasIsKnown() bool {
	if o != nil && o.IsKnown != nil {
		return true
	}

	return false
}

// SetIsKnown gets a reference to the given bool and assigns it to the IsKnown field.
func (o *Feature) SetIsKnown(v bool) {
	o.IsKnown = &v
}

func (o Feature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.IsRequired != nil {
		toSerialize["is_required"] = o.IsRequired
	}
	if o.IsKnown != nil {
		toSerialize["is_known"] = o.IsKnown
	}
	return json.Marshal(toSerialize)
}

type NullableFeature struct {
	value *Feature
	isSet bool
}

func (v NullableFeature) Get() *Feature {
	return v.value
}

func (v *NullableFeature) Set(val *Feature) {
	v.value = val
	v.isSet = true
}

func (v NullableFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeature(val *Feature) *NullableFeature {
	return &NullableFeature{value: val, isSet: true}
}

func (v NullableFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



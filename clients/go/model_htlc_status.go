/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HTLCStatus An enumeration.
type HTLCStatus string

// List of HTLCStatus
const (
	IN_FLIGHT HTLCStatus = "in_flight"
	SUCCEEDED HTLCStatus = "succeeded"
	FAILED HTLCStatus = "failed"
)

// All allowed values of HTLCStatus enum
var AllowedHTLCStatusEnumValues = []HTLCStatus{
	"in_flight",
	"succeeded",
	"failed",
}

func (v *HTLCStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HTLCStatus(value)
	for _, existing := range AllowedHTLCStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HTLCStatus", value)
}

// NewHTLCStatusFromValue returns a pointer to a valid HTLCStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHTLCStatusFromValue(v string) (*HTLCStatus, error) {
	ev := HTLCStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HTLCStatus: valid values are %v", v, AllowedHTLCStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HTLCStatus) IsValid() bool {
	for _, existing := range AllowedHTLCStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HTLCStatus value
func (v HTLCStatus) Ptr() *HTLCStatus {
	return &v
}

type NullableHTLCStatus struct {
	value *HTLCStatus
	isSet bool
}

func (v NullableHTLCStatus) Get() *HTLCStatus {
	return v.value
}

func (v *NullableHTLCStatus) Set(val *HTLCStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableHTLCStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableHTLCStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTLCStatus(val *HTLCStatus) *NullableHTLCStatus {
	return &NullableHTLCStatus{value: val, isSet: true}
}

func (v NullableHTLCStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTLCStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


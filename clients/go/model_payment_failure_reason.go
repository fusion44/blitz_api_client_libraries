/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PaymentFailureReason An enumeration.
type PaymentFailureReason string

// List of PaymentFailureReason
const (
	NONE PaymentFailureReason = "FAILURE_REASON_NONE"
	TIMEOUT PaymentFailureReason = "FAILURE_REASON_TIMEOUT"
	NO_ROUTE PaymentFailureReason = "FAILURE_REASON_NO_ROUTE"
	ERROR PaymentFailureReason = "FAILURE_REASON_ERROR"
	INCORRECT_PAYMENT_DETAILS PaymentFailureReason = "FAILURE_REASON_INCORRECT_PAYMENT_DETAILS"
	INSUFFICIENT_BALANCE PaymentFailureReason = "FAILURE_REASON_INSUFFICIENT_BALANCE"
)

// All allowed values of PaymentFailureReason enum
var AllowedPaymentFailureReasonEnumValues = []PaymentFailureReason{
	"FAILURE_REASON_NONE",
	"FAILURE_REASON_TIMEOUT",
	"FAILURE_REASON_NO_ROUTE",
	"FAILURE_REASON_ERROR",
	"FAILURE_REASON_INCORRECT_PAYMENT_DETAILS",
	"FAILURE_REASON_INSUFFICIENT_BALANCE",
}

func (v *PaymentFailureReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentFailureReason(value)
	for _, existing := range AllowedPaymentFailureReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentFailureReason", value)
}

// NewPaymentFailureReasonFromValue returns a pointer to a valid PaymentFailureReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentFailureReasonFromValue(v string) (*PaymentFailureReason, error) {
	ev := PaymentFailureReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentFailureReason: valid values are %v", v, AllowedPaymentFailureReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentFailureReason) IsValid() bool {
	for _, existing := range AllowedPaymentFailureReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentFailureReason value
func (v PaymentFailureReason) Ptr() *PaymentFailureReason {
	return &v
}

type NullablePaymentFailureReason struct {
	value *PaymentFailureReason
	isSet bool
}

func (v NullablePaymentFailureReason) Get() *PaymentFailureReason {
	return v.value
}

func (v *NullablePaymentFailureReason) Set(val *PaymentFailureReason) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentFailureReason) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentFailureReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentFailureReason(val *PaymentFailureReason) *NullablePaymentFailureReason {
	return &NullablePaymentFailureReason{value: val, isSet: true}
}

func (v NullablePaymentFailureReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentFailureReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


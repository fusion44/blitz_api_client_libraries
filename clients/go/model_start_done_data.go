/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StartDoneData struct for StartDoneData
type StartDoneData struct {
	Hostname *string `json:"hostname,omitempty"`
	ForceFreshSetup *bool `json:"forceFreshSetup,omitempty"`
	KeepBlockchain *bool `json:"keepBlockchain,omitempty"`
	Lightning *string `json:"lightning,omitempty"`
	PasswordA *string `json:"passwordA,omitempty"`
	PasswordB *string `json:"passwordB,omitempty"`
	PasswordC *string `json:"passwordC,omitempty"`
}

// NewStartDoneData instantiates a new StartDoneData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartDoneData() *StartDoneData {
	this := StartDoneData{}
	var hostname string = ""
	this.Hostname = &hostname
	var forceFreshSetup bool = false
	this.ForceFreshSetup = &forceFreshSetup
	var keepBlockchain bool = true
	this.KeepBlockchain = &keepBlockchain
	var lightning string = ""
	this.Lightning = &lightning
	var passwordA string = ""
	this.PasswordA = &passwordA
	var passwordB string = ""
	this.PasswordB = &passwordB
	var passwordC string = ""
	this.PasswordC = &passwordC
	return &this
}

// NewStartDoneDataWithDefaults instantiates a new StartDoneData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartDoneDataWithDefaults() *StartDoneData {
	this := StartDoneData{}
	var hostname string = ""
	this.Hostname = &hostname
	var forceFreshSetup bool = false
	this.ForceFreshSetup = &forceFreshSetup
	var keepBlockchain bool = true
	this.KeepBlockchain = &keepBlockchain
	var lightning string = ""
	this.Lightning = &lightning
	var passwordA string = ""
	this.PasswordA = &passwordA
	var passwordB string = ""
	this.PasswordB = &passwordB
	var passwordC string = ""
	this.PasswordC = &passwordC
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *StartDoneData) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartDoneData) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *StartDoneData) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *StartDoneData) SetHostname(v string) {
	o.Hostname = &v
}

// GetForceFreshSetup returns the ForceFreshSetup field value if set, zero value otherwise.
func (o *StartDoneData) GetForceFreshSetup() bool {
	if o == nil || o.ForceFreshSetup == nil {
		var ret bool
		return ret
	}
	return *o.ForceFreshSetup
}

// GetForceFreshSetupOk returns a tuple with the ForceFreshSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartDoneData) GetForceFreshSetupOk() (*bool, bool) {
	if o == nil || o.ForceFreshSetup == nil {
		return nil, false
	}
	return o.ForceFreshSetup, true
}

// HasForceFreshSetup returns a boolean if a field has been set.
func (o *StartDoneData) HasForceFreshSetup() bool {
	if o != nil && o.ForceFreshSetup != nil {
		return true
	}

	return false
}

// SetForceFreshSetup gets a reference to the given bool and assigns it to the ForceFreshSetup field.
func (o *StartDoneData) SetForceFreshSetup(v bool) {
	o.ForceFreshSetup = &v
}

// GetKeepBlockchain returns the KeepBlockchain field value if set, zero value otherwise.
func (o *StartDoneData) GetKeepBlockchain() bool {
	if o == nil || o.KeepBlockchain == nil {
		var ret bool
		return ret
	}
	return *o.KeepBlockchain
}

// GetKeepBlockchainOk returns a tuple with the KeepBlockchain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartDoneData) GetKeepBlockchainOk() (*bool, bool) {
	if o == nil || o.KeepBlockchain == nil {
		return nil, false
	}
	return o.KeepBlockchain, true
}

// HasKeepBlockchain returns a boolean if a field has been set.
func (o *StartDoneData) HasKeepBlockchain() bool {
	if o != nil && o.KeepBlockchain != nil {
		return true
	}

	return false
}

// SetKeepBlockchain gets a reference to the given bool and assigns it to the KeepBlockchain field.
func (o *StartDoneData) SetKeepBlockchain(v bool) {
	o.KeepBlockchain = &v
}

// GetLightning returns the Lightning field value if set, zero value otherwise.
func (o *StartDoneData) GetLightning() string {
	if o == nil || o.Lightning == nil {
		var ret string
		return ret
	}
	return *o.Lightning
}

// GetLightningOk returns a tuple with the Lightning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartDoneData) GetLightningOk() (*string, bool) {
	if o == nil || o.Lightning == nil {
		return nil, false
	}
	return o.Lightning, true
}

// HasLightning returns a boolean if a field has been set.
func (o *StartDoneData) HasLightning() bool {
	if o != nil && o.Lightning != nil {
		return true
	}

	return false
}

// SetLightning gets a reference to the given string and assigns it to the Lightning field.
func (o *StartDoneData) SetLightning(v string) {
	o.Lightning = &v
}

// GetPasswordA returns the PasswordA field value if set, zero value otherwise.
func (o *StartDoneData) GetPasswordA() string {
	if o == nil || o.PasswordA == nil {
		var ret string
		return ret
	}
	return *o.PasswordA
}

// GetPasswordAOk returns a tuple with the PasswordA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartDoneData) GetPasswordAOk() (*string, bool) {
	if o == nil || o.PasswordA == nil {
		return nil, false
	}
	return o.PasswordA, true
}

// HasPasswordA returns a boolean if a field has been set.
func (o *StartDoneData) HasPasswordA() bool {
	if o != nil && o.PasswordA != nil {
		return true
	}

	return false
}

// SetPasswordA gets a reference to the given string and assigns it to the PasswordA field.
func (o *StartDoneData) SetPasswordA(v string) {
	o.PasswordA = &v
}

// GetPasswordB returns the PasswordB field value if set, zero value otherwise.
func (o *StartDoneData) GetPasswordB() string {
	if o == nil || o.PasswordB == nil {
		var ret string
		return ret
	}
	return *o.PasswordB
}

// GetPasswordBOk returns a tuple with the PasswordB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartDoneData) GetPasswordBOk() (*string, bool) {
	if o == nil || o.PasswordB == nil {
		return nil, false
	}
	return o.PasswordB, true
}

// HasPasswordB returns a boolean if a field has been set.
func (o *StartDoneData) HasPasswordB() bool {
	if o != nil && o.PasswordB != nil {
		return true
	}

	return false
}

// SetPasswordB gets a reference to the given string and assigns it to the PasswordB field.
func (o *StartDoneData) SetPasswordB(v string) {
	o.PasswordB = &v
}

// GetPasswordC returns the PasswordC field value if set, zero value otherwise.
func (o *StartDoneData) GetPasswordC() string {
	if o == nil || o.PasswordC == nil {
		var ret string
		return ret
	}
	return *o.PasswordC
}

// GetPasswordCOk returns a tuple with the PasswordC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartDoneData) GetPasswordCOk() (*string, bool) {
	if o == nil || o.PasswordC == nil {
		return nil, false
	}
	return o.PasswordC, true
}

// HasPasswordC returns a boolean if a field has been set.
func (o *StartDoneData) HasPasswordC() bool {
	if o != nil && o.PasswordC != nil {
		return true
	}

	return false
}

// SetPasswordC gets a reference to the given string and assigns it to the PasswordC field.
func (o *StartDoneData) SetPasswordC(v string) {
	o.PasswordC = &v
}

func (o StartDoneData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.ForceFreshSetup != nil {
		toSerialize["forceFreshSetup"] = o.ForceFreshSetup
	}
	if o.KeepBlockchain != nil {
		toSerialize["keepBlockchain"] = o.KeepBlockchain
	}
	if o.Lightning != nil {
		toSerialize["lightning"] = o.Lightning
	}
	if o.PasswordA != nil {
		toSerialize["passwordA"] = o.PasswordA
	}
	if o.PasswordB != nil {
		toSerialize["passwordB"] = o.PasswordB
	}
	if o.PasswordC != nil {
		toSerialize["passwordC"] = o.PasswordC
	}
	return json.Marshal(toSerialize)
}

type NullableStartDoneData struct {
	value *StartDoneData
	isSet bool
}

func (v NullableStartDoneData) Get() *StartDoneData {
	return v.value
}

func (v *NullableStartDoneData) Set(val *StartDoneData) {
	v.value = val
	v.isSet = true
}

func (v NullableStartDoneData) IsSet() bool {
	return v.isSet
}

func (v *NullableStartDoneData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartDoneData(val *StartDoneData) *NullableStartDoneData {
	return &NullableStartDoneData{value: val, isSet: true}
}

func (v NullableStartDoneData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartDoneData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



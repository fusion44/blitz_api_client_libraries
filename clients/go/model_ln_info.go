/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LnInfo struct for LnInfo
type LnInfo struct {
	// Lightning software implementation (LND, CLN)
	Implementation string `json:"implementation"`
	// The version of the software that the node is running.
	Version string `json:"version"`
	// The SHA1 commit hash that the daemon is compiled with.
	CommitHash string `json:"commit_hash"`
	IdentityPubkey *string `json:"identity_pubkey,omitempty"`
	IdentityUri *string `json:"identity_uri,omitempty"`
	// The alias of the node.
	Alias string `json:"alias"`
	// The color of the current node in hex code format.
	Color string `json:"color"`
	// Number of pending channels.
	NumPendingChannels int32 `json:"num_pending_channels"`
	// Number of active channels.
	NumActiveChannels int32 `json:"num_active_channels"`
	// Number of inactive channels.
	NumInactiveChannels int32 `json:"num_inactive_channels"`
	// Number of peers.
	NumPeers int32 `json:"num_peers"`
	// The node's current view of the height of the best block. Only available with LND.
	BlockHeight int32 `json:"block_height"`
	// The node's current view of the hash of the best block. Only available with LND.
	BlockHash *string `json:"block_hash,omitempty"`
	// Timestamp of the block best known to the wallet. Only available with LND.
	BestHeaderTimestamp *int32 `json:"best_header_timestamp,omitempty"`
	// Whether the wallet's view is synced to the main chain. Only available with LND.
	SyncedToChain *bool `json:"synced_to_chain,omitempty"`
	// Whether we consider ourselves synced with the public channel graph. Only available with LND.
	SyncedToGraph *bool `json:"synced_to_graph,omitempty"`
	// A list of active chains the node is connected to
	Chains []Chain `json:"chains,omitempty"`
	// The URIs of the current node.
	Uris []string `json:"uris,omitempty"`
	// Features that our node has advertised in our init message node announcements and invoices. Not yet implemented with CLN
	Features []FeaturesEntry `json:"features,omitempty"`
}

// NewLnInfo instantiates a new LnInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLnInfo(implementation string, version string, commitHash string, alias string, color string, numPendingChannels int32, numActiveChannels int32, numInactiveChannels int32, numPeers int32, blockHeight int32) *LnInfo {
	this := LnInfo{}
	this.Implementation = implementation
	this.Version = version
	this.CommitHash = commitHash
	var identityPubkey string = "The identity pubkey of the current node."
	this.IdentityPubkey = &identityPubkey
	var identityUri string = "The complete URI (pubkey@physicaladdress:port) the current node."
	this.IdentityUri = &identityUri
	this.Alias = alias
	this.Color = color
	this.NumPendingChannels = numPendingChannels
	this.NumActiveChannels = numActiveChannels
	this.NumInactiveChannels = numInactiveChannels
	this.NumPeers = numPeers
	this.BlockHeight = blockHeight
	var blockHash string = ""
	this.BlockHash = &blockHash
	return &this
}

// NewLnInfoWithDefaults instantiates a new LnInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLnInfoWithDefaults() *LnInfo {
	this := LnInfo{}
	var identityPubkey string = "The identity pubkey of the current node."
	this.IdentityPubkey = &identityPubkey
	var identityUri string = "The complete URI (pubkey@physicaladdress:port) the current node."
	this.IdentityUri = &identityUri
	var blockHash string = ""
	this.BlockHash = &blockHash
	return &this
}

// GetImplementation returns the Implementation field value
func (o *LnInfo) GetImplementation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Implementation
}

// GetImplementationOk returns a tuple with the Implementation field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetImplementationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Implementation, true
}

// SetImplementation sets field value
func (o *LnInfo) SetImplementation(v string) {
	o.Implementation = v
}

// GetVersion returns the Version field value
func (o *LnInfo) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *LnInfo) SetVersion(v string) {
	o.Version = v
}

// GetCommitHash returns the CommitHash field value
func (o *LnInfo) GetCommitHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetCommitHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitHash, true
}

// SetCommitHash sets field value
func (o *LnInfo) SetCommitHash(v string) {
	o.CommitHash = v
}

// GetIdentityPubkey returns the IdentityPubkey field value if set, zero value otherwise.
func (o *LnInfo) GetIdentityPubkey() string {
	if o == nil || o.IdentityPubkey == nil {
		var ret string
		return ret
	}
	return *o.IdentityPubkey
}

// GetIdentityPubkeyOk returns a tuple with the IdentityPubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LnInfo) GetIdentityPubkeyOk() (*string, bool) {
	if o == nil || o.IdentityPubkey == nil {
		return nil, false
	}
	return o.IdentityPubkey, true
}

// HasIdentityPubkey returns a boolean if a field has been set.
func (o *LnInfo) HasIdentityPubkey() bool {
	if o != nil && o.IdentityPubkey != nil {
		return true
	}

	return false
}

// SetIdentityPubkey gets a reference to the given string and assigns it to the IdentityPubkey field.
func (o *LnInfo) SetIdentityPubkey(v string) {
	o.IdentityPubkey = &v
}

// GetIdentityUri returns the IdentityUri field value if set, zero value otherwise.
func (o *LnInfo) GetIdentityUri() string {
	if o == nil || o.IdentityUri == nil {
		var ret string
		return ret
	}
	return *o.IdentityUri
}

// GetIdentityUriOk returns a tuple with the IdentityUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LnInfo) GetIdentityUriOk() (*string, bool) {
	if o == nil || o.IdentityUri == nil {
		return nil, false
	}
	return o.IdentityUri, true
}

// HasIdentityUri returns a boolean if a field has been set.
func (o *LnInfo) HasIdentityUri() bool {
	if o != nil && o.IdentityUri != nil {
		return true
	}

	return false
}

// SetIdentityUri gets a reference to the given string and assigns it to the IdentityUri field.
func (o *LnInfo) SetIdentityUri(v string) {
	o.IdentityUri = &v
}

// GetAlias returns the Alias field value
func (o *LnInfo) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *LnInfo) SetAlias(v string) {
	o.Alias = v
}

// GetColor returns the Color field value
func (o *LnInfo) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *LnInfo) SetColor(v string) {
	o.Color = v
}

// GetNumPendingChannels returns the NumPendingChannels field value
func (o *LnInfo) GetNumPendingChannels() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumPendingChannels
}

// GetNumPendingChannelsOk returns a tuple with the NumPendingChannels field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetNumPendingChannelsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumPendingChannels, true
}

// SetNumPendingChannels sets field value
func (o *LnInfo) SetNumPendingChannels(v int32) {
	o.NumPendingChannels = v
}

// GetNumActiveChannels returns the NumActiveChannels field value
func (o *LnInfo) GetNumActiveChannels() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumActiveChannels
}

// GetNumActiveChannelsOk returns a tuple with the NumActiveChannels field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetNumActiveChannelsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumActiveChannels, true
}

// SetNumActiveChannels sets field value
func (o *LnInfo) SetNumActiveChannels(v int32) {
	o.NumActiveChannels = v
}

// GetNumInactiveChannels returns the NumInactiveChannels field value
func (o *LnInfo) GetNumInactiveChannels() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumInactiveChannels
}

// GetNumInactiveChannelsOk returns a tuple with the NumInactiveChannels field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetNumInactiveChannelsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumInactiveChannels, true
}

// SetNumInactiveChannels sets field value
func (o *LnInfo) SetNumInactiveChannels(v int32) {
	o.NumInactiveChannels = v
}

// GetNumPeers returns the NumPeers field value
func (o *LnInfo) GetNumPeers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumPeers
}

// GetNumPeersOk returns a tuple with the NumPeers field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetNumPeersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumPeers, true
}

// SetNumPeers sets field value
func (o *LnInfo) SetNumPeers(v int32) {
	o.NumPeers = v
}

// GetBlockHeight returns the BlockHeight field value
func (o *LnInfo) GetBlockHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockHeight
}

// GetBlockHeightOk returns a tuple with the BlockHeight field value
// and a boolean to check if the value has been set.
func (o *LnInfo) GetBlockHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHeight, true
}

// SetBlockHeight sets field value
func (o *LnInfo) SetBlockHeight(v int32) {
	o.BlockHeight = v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *LnInfo) GetBlockHash() string {
	if o == nil || o.BlockHash == nil {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LnInfo) GetBlockHashOk() (*string, bool) {
	if o == nil || o.BlockHash == nil {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *LnInfo) HasBlockHash() bool {
	if o != nil && o.BlockHash != nil {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *LnInfo) SetBlockHash(v string) {
	o.BlockHash = &v
}

// GetBestHeaderTimestamp returns the BestHeaderTimestamp field value if set, zero value otherwise.
func (o *LnInfo) GetBestHeaderTimestamp() int32 {
	if o == nil || o.BestHeaderTimestamp == nil {
		var ret int32
		return ret
	}
	return *o.BestHeaderTimestamp
}

// GetBestHeaderTimestampOk returns a tuple with the BestHeaderTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LnInfo) GetBestHeaderTimestampOk() (*int32, bool) {
	if o == nil || o.BestHeaderTimestamp == nil {
		return nil, false
	}
	return o.BestHeaderTimestamp, true
}

// HasBestHeaderTimestamp returns a boolean if a field has been set.
func (o *LnInfo) HasBestHeaderTimestamp() bool {
	if o != nil && o.BestHeaderTimestamp != nil {
		return true
	}

	return false
}

// SetBestHeaderTimestamp gets a reference to the given int32 and assigns it to the BestHeaderTimestamp field.
func (o *LnInfo) SetBestHeaderTimestamp(v int32) {
	o.BestHeaderTimestamp = &v
}

// GetSyncedToChain returns the SyncedToChain field value if set, zero value otherwise.
func (o *LnInfo) GetSyncedToChain() bool {
	if o == nil || o.SyncedToChain == nil {
		var ret bool
		return ret
	}
	return *o.SyncedToChain
}

// GetSyncedToChainOk returns a tuple with the SyncedToChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LnInfo) GetSyncedToChainOk() (*bool, bool) {
	if o == nil || o.SyncedToChain == nil {
		return nil, false
	}
	return o.SyncedToChain, true
}

// HasSyncedToChain returns a boolean if a field has been set.
func (o *LnInfo) HasSyncedToChain() bool {
	if o != nil && o.SyncedToChain != nil {
		return true
	}

	return false
}

// SetSyncedToChain gets a reference to the given bool and assigns it to the SyncedToChain field.
func (o *LnInfo) SetSyncedToChain(v bool) {
	o.SyncedToChain = &v
}

// GetSyncedToGraph returns the SyncedToGraph field value if set, zero value otherwise.
func (o *LnInfo) GetSyncedToGraph() bool {
	if o == nil || o.SyncedToGraph == nil {
		var ret bool
		return ret
	}
	return *o.SyncedToGraph
}

// GetSyncedToGraphOk returns a tuple with the SyncedToGraph field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LnInfo) GetSyncedToGraphOk() (*bool, bool) {
	if o == nil || o.SyncedToGraph == nil {
		return nil, false
	}
	return o.SyncedToGraph, true
}

// HasSyncedToGraph returns a boolean if a field has been set.
func (o *LnInfo) HasSyncedToGraph() bool {
	if o != nil && o.SyncedToGraph != nil {
		return true
	}

	return false
}

// SetSyncedToGraph gets a reference to the given bool and assigns it to the SyncedToGraph field.
func (o *LnInfo) SetSyncedToGraph(v bool) {
	o.SyncedToGraph = &v
}

// GetChains returns the Chains field value if set, zero value otherwise.
func (o *LnInfo) GetChains() []Chain {
	if o == nil || o.Chains == nil {
		var ret []Chain
		return ret
	}
	return o.Chains
}

// GetChainsOk returns a tuple with the Chains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LnInfo) GetChainsOk() ([]Chain, bool) {
	if o == nil || o.Chains == nil {
		return nil, false
	}
	return o.Chains, true
}

// HasChains returns a boolean if a field has been set.
func (o *LnInfo) HasChains() bool {
	if o != nil && o.Chains != nil {
		return true
	}

	return false
}

// SetChains gets a reference to the given []Chain and assigns it to the Chains field.
func (o *LnInfo) SetChains(v []Chain) {
	o.Chains = v
}

// GetUris returns the Uris field value if set, zero value otherwise.
func (o *LnInfo) GetUris() []string {
	if o == nil || o.Uris == nil {
		var ret []string
		return ret
	}
	return o.Uris
}

// GetUrisOk returns a tuple with the Uris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LnInfo) GetUrisOk() ([]string, bool) {
	if o == nil || o.Uris == nil {
		return nil, false
	}
	return o.Uris, true
}

// HasUris returns a boolean if a field has been set.
func (o *LnInfo) HasUris() bool {
	if o != nil && o.Uris != nil {
		return true
	}

	return false
}

// SetUris gets a reference to the given []string and assigns it to the Uris field.
func (o *LnInfo) SetUris(v []string) {
	o.Uris = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *LnInfo) GetFeatures() []FeaturesEntry {
	if o == nil || o.Features == nil {
		var ret []FeaturesEntry
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LnInfo) GetFeaturesOk() ([]FeaturesEntry, bool) {
	if o == nil || o.Features == nil {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *LnInfo) HasFeatures() bool {
	if o != nil && o.Features != nil {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []FeaturesEntry and assigns it to the Features field.
func (o *LnInfo) SetFeatures(v []FeaturesEntry) {
	o.Features = v
}

func (o LnInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["implementation"] = o.Implementation
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["commit_hash"] = o.CommitHash
	}
	if o.IdentityPubkey != nil {
		toSerialize["identity_pubkey"] = o.IdentityPubkey
	}
	if o.IdentityUri != nil {
		toSerialize["identity_uri"] = o.IdentityUri
	}
	if true {
		toSerialize["alias"] = o.Alias
	}
	if true {
		toSerialize["color"] = o.Color
	}
	if true {
		toSerialize["num_pending_channels"] = o.NumPendingChannels
	}
	if true {
		toSerialize["num_active_channels"] = o.NumActiveChannels
	}
	if true {
		toSerialize["num_inactive_channels"] = o.NumInactiveChannels
	}
	if true {
		toSerialize["num_peers"] = o.NumPeers
	}
	if true {
		toSerialize["block_height"] = o.BlockHeight
	}
	if o.BlockHash != nil {
		toSerialize["block_hash"] = o.BlockHash
	}
	if o.BestHeaderTimestamp != nil {
		toSerialize["best_header_timestamp"] = o.BestHeaderTimestamp
	}
	if o.SyncedToChain != nil {
		toSerialize["synced_to_chain"] = o.SyncedToChain
	}
	if o.SyncedToGraph != nil {
		toSerialize["synced_to_graph"] = o.SyncedToGraph
	}
	if o.Chains != nil {
		toSerialize["chains"] = o.Chains
	}
	if o.Uris != nil {
		toSerialize["uris"] = o.Uris
	}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	return json.Marshal(toSerialize)
}

type NullableLnInfo struct {
	value *LnInfo
	isSet bool
}

func (v NullableLnInfo) Get() *LnInfo {
	return v.value
}

func (v *NullableLnInfo) Set(val *LnInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLnInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLnInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLnInfo(val *LnInfo) *NullableLnInfo {
	return &NullableLnInfo{value: val, isSet: true}
}

func (v NullableLnInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLnInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



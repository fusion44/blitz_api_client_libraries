/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SendCoinsInput struct for SendCoinsInput
type SendCoinsInput struct {
	// The base58 or bech32 encoded bitcoin address to send coins to on-chain
	Address string `json:"address"`
	// The number of bitcoin denominated in satoshis to send
	Amount int32 `json:"amount"`
	// The number of blocks that the transaction *should* confirm in, will be used for fee estimation
	TargetConf *int32 `json:"target_conf,omitempty"`
	// A manual fee expressed in sat/vbyte that should be used when crafting the transaction (default: 0)
	SatPerVbyte *int32 `json:"sat_per_vbyte,omitempty"`
	// The minimum number of confirmations each one of your outputs used for the transaction must satisfy
	MinConfs *int32 `json:"min_confs,omitempty"`
	// A label for the transaction. Ignored by CLN backend.
	Label *string `json:"label,omitempty"`
}

// NewSendCoinsInput instantiates a new SendCoinsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendCoinsInput(address string, amount int32) *SendCoinsInput {
	this := SendCoinsInput{}
	this.Address = address
	this.Amount = amount
	var minConfs int32 = 1
	this.MinConfs = &minConfs
	var label string = ""
	this.Label = &label
	return &this
}

// NewSendCoinsInputWithDefaults instantiates a new SendCoinsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendCoinsInputWithDefaults() *SendCoinsInput {
	this := SendCoinsInput{}
	var minConfs int32 = 1
	this.MinConfs = &minConfs
	var label string = ""
	this.Label = &label
	return &this
}

// GetAddress returns the Address field value
func (o *SendCoinsInput) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *SendCoinsInput) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *SendCoinsInput) SetAddress(v string) {
	o.Address = v
}

// GetAmount returns the Amount field value
func (o *SendCoinsInput) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SendCoinsInput) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SendCoinsInput) SetAmount(v int32) {
	o.Amount = v
}

// GetTargetConf returns the TargetConf field value if set, zero value otherwise.
func (o *SendCoinsInput) GetTargetConf() int32 {
	if o == nil || o.TargetConf == nil {
		var ret int32
		return ret
	}
	return *o.TargetConf
}

// GetTargetConfOk returns a tuple with the TargetConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendCoinsInput) GetTargetConfOk() (*int32, bool) {
	if o == nil || o.TargetConf == nil {
		return nil, false
	}
	return o.TargetConf, true
}

// HasTargetConf returns a boolean if a field has been set.
func (o *SendCoinsInput) HasTargetConf() bool {
	if o != nil && o.TargetConf != nil {
		return true
	}

	return false
}

// SetTargetConf gets a reference to the given int32 and assigns it to the TargetConf field.
func (o *SendCoinsInput) SetTargetConf(v int32) {
	o.TargetConf = &v
}

// GetSatPerVbyte returns the SatPerVbyte field value if set, zero value otherwise.
func (o *SendCoinsInput) GetSatPerVbyte() int32 {
	if o == nil || o.SatPerVbyte == nil {
		var ret int32
		return ret
	}
	return *o.SatPerVbyte
}

// GetSatPerVbyteOk returns a tuple with the SatPerVbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendCoinsInput) GetSatPerVbyteOk() (*int32, bool) {
	if o == nil || o.SatPerVbyte == nil {
		return nil, false
	}
	return o.SatPerVbyte, true
}

// HasSatPerVbyte returns a boolean if a field has been set.
func (o *SendCoinsInput) HasSatPerVbyte() bool {
	if o != nil && o.SatPerVbyte != nil {
		return true
	}

	return false
}

// SetSatPerVbyte gets a reference to the given int32 and assigns it to the SatPerVbyte field.
func (o *SendCoinsInput) SetSatPerVbyte(v int32) {
	o.SatPerVbyte = &v
}

// GetMinConfs returns the MinConfs field value if set, zero value otherwise.
func (o *SendCoinsInput) GetMinConfs() int32 {
	if o == nil || o.MinConfs == nil {
		var ret int32
		return ret
	}
	return *o.MinConfs
}

// GetMinConfsOk returns a tuple with the MinConfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendCoinsInput) GetMinConfsOk() (*int32, bool) {
	if o == nil || o.MinConfs == nil {
		return nil, false
	}
	return o.MinConfs, true
}

// HasMinConfs returns a boolean if a field has been set.
func (o *SendCoinsInput) HasMinConfs() bool {
	if o != nil && o.MinConfs != nil {
		return true
	}

	return false
}

// SetMinConfs gets a reference to the given int32 and assigns it to the MinConfs field.
func (o *SendCoinsInput) SetMinConfs(v int32) {
	o.MinConfs = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SendCoinsInput) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendCoinsInput) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SendCoinsInput) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SendCoinsInput) SetLabel(v string) {
	o.Label = &v
}

func (o SendCoinsInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if o.TargetConf != nil {
		toSerialize["target_conf"] = o.TargetConf
	}
	if o.SatPerVbyte != nil {
		toSerialize["sat_per_vbyte"] = o.SatPerVbyte
	}
	if o.MinConfs != nil {
		toSerialize["min_confs"] = o.MinConfs
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	return json.Marshal(toSerialize)
}

type NullableSendCoinsInput struct {
	value *SendCoinsInput
	isSet bool
}

func (v NullableSendCoinsInput) Get() *SendCoinsInput {
	return v.value
}

func (v *NullableSendCoinsInput) Set(val *SendCoinsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSendCoinsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSendCoinsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendCoinsInput(val *SendCoinsInput) *NullableSendCoinsInput {
	return &NullableSendCoinsInput{value: val, isSet: true}
}

func (v NullableSendCoinsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendCoinsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



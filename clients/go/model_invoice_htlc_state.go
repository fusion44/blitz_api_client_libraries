/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InvoiceHTLCState An enumeration.
type InvoiceHTLCState string

// List of InvoiceHTLCState
const (
	ACCEPTED InvoiceHTLCState = "accepted"
	SETTLED InvoiceHTLCState = "settled"
	CANCELED InvoiceHTLCState = "canceled"
)

// All allowed values of InvoiceHTLCState enum
var AllowedInvoiceHTLCStateEnumValues = []InvoiceHTLCState{
	"accepted",
	"settled",
	"canceled",
}

func (v *InvoiceHTLCState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvoiceHTLCState(value)
	for _, existing := range AllowedInvoiceHTLCStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InvoiceHTLCState", value)
}

// NewInvoiceHTLCStateFromValue returns a pointer to a valid InvoiceHTLCState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvoiceHTLCStateFromValue(v string) (*InvoiceHTLCState, error) {
	ev := InvoiceHTLCState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvoiceHTLCState: valid values are %v", v, AllowedInvoiceHTLCStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvoiceHTLCState) IsValid() bool {
	for _, existing := range AllowedInvoiceHTLCStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvoiceHTLCState value
func (v InvoiceHTLCState) Ptr() *InvoiceHTLCState {
	return &v
}

type NullableInvoiceHTLCState struct {
	value *InvoiceHTLCState
	isSet bool
}

func (v NullableInvoiceHTLCState) Get() *InvoiceHTLCState {
	return v.value
}

func (v *NullableInvoiceHTLCState) Set(val *InvoiceHTLCState) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceHTLCState) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceHTLCState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceHTLCState(val *InvoiceHTLCState) *NullableInvoiceHTLCState {
	return &NullableInvoiceHTLCState{value: val, isSet: true}
}

func (v NullableInvoiceHTLCState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceHTLCState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SoftFork struct for SoftFork
type SoftFork struct {
	// Name of the softfork
	Name string `json:"name"`
	// One of \"buried\", \"bip9\"
	Type string `json:"type"`
	// True **if** the rules are enforced for the mempool and the next block
	Active bool `json:"active"`
	Bip9 *Bip9 `json:"bip9,omitempty"`
	// Height of the first block which the rules are or will be enforced (only for `buried` type, or `bip9` type with `active` status)
	Height *int32 `json:"height,omitempty"`
}

// NewSoftFork instantiates a new SoftFork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftFork(name string, type_ string, active bool) *SoftFork {
	this := SoftFork{}
	this.Name = name
	this.Type = type_
	this.Active = active
	return &this
}

// NewSoftForkWithDefaults instantiates a new SoftFork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftForkWithDefaults() *SoftFork {
	this := SoftFork{}
	return &this
}

// GetName returns the Name field value
func (o *SoftFork) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SoftFork) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SoftFork) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *SoftFork) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SoftFork) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SoftFork) SetType(v string) {
	o.Type = v
}

// GetActive returns the Active field value
func (o *SoftFork) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *SoftFork) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *SoftFork) SetActive(v bool) {
	o.Active = v
}

// GetBip9 returns the Bip9 field value if set, zero value otherwise.
func (o *SoftFork) GetBip9() Bip9 {
	if o == nil || o.Bip9 == nil {
		var ret Bip9
		return ret
	}
	return *o.Bip9
}

// GetBip9Ok returns a tuple with the Bip9 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftFork) GetBip9Ok() (*Bip9, bool) {
	if o == nil || o.Bip9 == nil {
		return nil, false
	}
	return o.Bip9, true
}

// HasBip9 returns a boolean if a field has been set.
func (o *SoftFork) HasBip9() bool {
	if o != nil && o.Bip9 != nil {
		return true
	}

	return false
}

// SetBip9 gets a reference to the given Bip9 and assigns it to the Bip9 field.
func (o *SoftFork) SetBip9(v Bip9) {
	o.Bip9 = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *SoftFork) GetHeight() int32 {
	if o == nil || o.Height == nil {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftFork) GetHeightOk() (*int32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *SoftFork) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *SoftFork) SetHeight(v int32) {
	o.Height = &v
}

func (o SoftFork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["active"] = o.Active
	}
	if o.Bip9 != nil {
		toSerialize["bip9"] = o.Bip9
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	return json.Marshal(toSerialize)
}

type NullableSoftFork struct {
	value *SoftFork
	isSet bool
}

func (v NullableSoftFork) Get() *SoftFork {
	return v.value
}

func (v *NullableSoftFork) Set(val *SoftFork) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftFork) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftFork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftFork(val *SoftFork) *NullableSoftFork {
	return &NullableSoftFork{value: val, isSet: true}
}

func (v NullableSoftFork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftFork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NetworkInfo struct for NetworkInfo
type NetworkInfo struct {
	// The bitcoin core server version
	Version int32 `json:"version"`
	// The server subversion string
	Subversion string `json:"subversion"`
	// The protocol version
	ProtocolVersion int32 `json:"protocol_version"`
	// The services we offer to the network, hex formatted
	LocalServices *string `json:"local_services,omitempty"`
	// The services we offer to the network, in human-readable form
	LocalServicesNames []string `json:"local_services_names,omitempty"`
	// True if transaction relay is requested from peers
	LocalRelay bool `json:"local_relay"`
	// The time offset
	TimeOffset int32 `json:"time_offset"`
	// The total number of connections
	Connections int32 `json:"connections"`
	// The number of inbound connections
	ConnectionsIn int32 `json:"connections_in"`
	// The number of outbound connections
	ConnectionsOut int32 `json:"connections_out"`
	// Whether p2p networking is enabled
	NetworkActive bool `json:"network_active"`
	// Information per network
	Networks []BtcNetwork `json:"networks"`
	// Minimum relay fee for transactions in BTC/kB
	RelayFee int32 `json:"relay_fee"`
	// Minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB
	IncrementalFee int32 `json:"incremental_fee"`
	// List of local addresses
	LocalAddresses []BtcLocalAddress `json:"local_addresses,omitempty"`
	// Any network and blockchain warnings
	Warnings *string `json:"warnings,omitempty"`
}

// NewNetworkInfo instantiates a new NetworkInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInfo(version int32, subversion string, protocolVersion int32, localRelay bool, timeOffset int32, connections int32, connectionsIn int32, connectionsOut int32, networkActive bool, networks []BtcNetwork, relayFee int32, incrementalFee int32) *NetworkInfo {
	this := NetworkInfo{}
	this.Version = version
	this.Subversion = subversion
	this.ProtocolVersion = protocolVersion
	this.LocalRelay = localRelay
	this.TimeOffset = timeOffset
	this.Connections = connections
	this.ConnectionsIn = connectionsIn
	this.ConnectionsOut = connectionsOut
	this.NetworkActive = networkActive
	this.Networks = networks
	this.RelayFee = relayFee
	this.IncrementalFee = incrementalFee
	return &this
}

// NewNetworkInfoWithDefaults instantiates a new NetworkInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInfoWithDefaults() *NetworkInfo {
	this := NetworkInfo{}
	return &this
}

// GetVersion returns the Version field value
func (o *NetworkInfo) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *NetworkInfo) SetVersion(v int32) {
	o.Version = v
}

// GetSubversion returns the Subversion field value
func (o *NetworkInfo) GetSubversion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subversion
}

// GetSubversionOk returns a tuple with the Subversion field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetSubversionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subversion, true
}

// SetSubversion sets field value
func (o *NetworkInfo) SetSubversion(v string) {
	o.Subversion = v
}

// GetProtocolVersion returns the ProtocolVersion field value
func (o *NetworkInfo) GetProtocolVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProtocolVersion
}

// GetProtocolVersionOk returns a tuple with the ProtocolVersion field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetProtocolVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtocolVersion, true
}

// SetProtocolVersion sets field value
func (o *NetworkInfo) SetProtocolVersion(v int32) {
	o.ProtocolVersion = v
}

// GetLocalServices returns the LocalServices field value if set, zero value otherwise.
func (o *NetworkInfo) GetLocalServices() string {
	if o == nil || o.LocalServices == nil {
		var ret string
		return ret
	}
	return *o.LocalServices
}

// GetLocalServicesOk returns a tuple with the LocalServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetLocalServicesOk() (*string, bool) {
	if o == nil || o.LocalServices == nil {
		return nil, false
	}
	return o.LocalServices, true
}

// HasLocalServices returns a boolean if a field has been set.
func (o *NetworkInfo) HasLocalServices() bool {
	if o != nil && o.LocalServices != nil {
		return true
	}

	return false
}

// SetLocalServices gets a reference to the given string and assigns it to the LocalServices field.
func (o *NetworkInfo) SetLocalServices(v string) {
	o.LocalServices = &v
}

// GetLocalServicesNames returns the LocalServicesNames field value if set, zero value otherwise.
func (o *NetworkInfo) GetLocalServicesNames() []string {
	if o == nil || o.LocalServicesNames == nil {
		var ret []string
		return ret
	}
	return o.LocalServicesNames
}

// GetLocalServicesNamesOk returns a tuple with the LocalServicesNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetLocalServicesNamesOk() ([]string, bool) {
	if o == nil || o.LocalServicesNames == nil {
		return nil, false
	}
	return o.LocalServicesNames, true
}

// HasLocalServicesNames returns a boolean if a field has been set.
func (o *NetworkInfo) HasLocalServicesNames() bool {
	if o != nil && o.LocalServicesNames != nil {
		return true
	}

	return false
}

// SetLocalServicesNames gets a reference to the given []string and assigns it to the LocalServicesNames field.
func (o *NetworkInfo) SetLocalServicesNames(v []string) {
	o.LocalServicesNames = v
}

// GetLocalRelay returns the LocalRelay field value
func (o *NetworkInfo) GetLocalRelay() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LocalRelay
}

// GetLocalRelayOk returns a tuple with the LocalRelay field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetLocalRelayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalRelay, true
}

// SetLocalRelay sets field value
func (o *NetworkInfo) SetLocalRelay(v bool) {
	o.LocalRelay = v
}

// GetTimeOffset returns the TimeOffset field value
func (o *NetworkInfo) GetTimeOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimeOffset
}

// GetTimeOffsetOk returns a tuple with the TimeOffset field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetTimeOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeOffset, true
}

// SetTimeOffset sets field value
func (o *NetworkInfo) SetTimeOffset(v int32) {
	o.TimeOffset = v
}

// GetConnections returns the Connections field value
func (o *NetworkInfo) GetConnections() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetConnectionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connections, true
}

// SetConnections sets field value
func (o *NetworkInfo) SetConnections(v int32) {
	o.Connections = v
}

// GetConnectionsIn returns the ConnectionsIn field value
func (o *NetworkInfo) GetConnectionsIn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConnectionsIn
}

// GetConnectionsInOk returns a tuple with the ConnectionsIn field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetConnectionsInOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionsIn, true
}

// SetConnectionsIn sets field value
func (o *NetworkInfo) SetConnectionsIn(v int32) {
	o.ConnectionsIn = v
}

// GetConnectionsOut returns the ConnectionsOut field value
func (o *NetworkInfo) GetConnectionsOut() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConnectionsOut
}

// GetConnectionsOutOk returns a tuple with the ConnectionsOut field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetConnectionsOutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionsOut, true
}

// SetConnectionsOut sets field value
func (o *NetworkInfo) SetConnectionsOut(v int32) {
	o.ConnectionsOut = v
}

// GetNetworkActive returns the NetworkActive field value
func (o *NetworkInfo) GetNetworkActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NetworkActive
}

// GetNetworkActiveOk returns a tuple with the NetworkActive field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetNetworkActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkActive, true
}

// SetNetworkActive sets field value
func (o *NetworkInfo) SetNetworkActive(v bool) {
	o.NetworkActive = v
}

// GetNetworks returns the Networks field value
func (o *NetworkInfo) GetNetworks() []BtcNetwork {
	if o == nil {
		var ret []BtcNetwork
		return ret
	}

	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetNetworksOk() ([]BtcNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return o.Networks, true
}

// SetNetworks sets field value
func (o *NetworkInfo) SetNetworks(v []BtcNetwork) {
	o.Networks = v
}

// GetRelayFee returns the RelayFee field value
func (o *NetworkInfo) GetRelayFee() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RelayFee
}

// GetRelayFeeOk returns a tuple with the RelayFee field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetRelayFeeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelayFee, true
}

// SetRelayFee sets field value
func (o *NetworkInfo) SetRelayFee(v int32) {
	o.RelayFee = v
}

// GetIncrementalFee returns the IncrementalFee field value
func (o *NetworkInfo) GetIncrementalFee() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IncrementalFee
}

// GetIncrementalFeeOk returns a tuple with the IncrementalFee field value
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetIncrementalFeeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncrementalFee, true
}

// SetIncrementalFee sets field value
func (o *NetworkInfo) SetIncrementalFee(v int32) {
	o.IncrementalFee = v
}

// GetLocalAddresses returns the LocalAddresses field value if set, zero value otherwise.
func (o *NetworkInfo) GetLocalAddresses() []BtcLocalAddress {
	if o == nil || o.LocalAddresses == nil {
		var ret []BtcLocalAddress
		return ret
	}
	return o.LocalAddresses
}

// GetLocalAddressesOk returns a tuple with the LocalAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetLocalAddressesOk() ([]BtcLocalAddress, bool) {
	if o == nil || o.LocalAddresses == nil {
		return nil, false
	}
	return o.LocalAddresses, true
}

// HasLocalAddresses returns a boolean if a field has been set.
func (o *NetworkInfo) HasLocalAddresses() bool {
	if o != nil && o.LocalAddresses != nil {
		return true
	}

	return false
}

// SetLocalAddresses gets a reference to the given []BtcLocalAddress and assigns it to the LocalAddresses field.
func (o *NetworkInfo) SetLocalAddresses(v []BtcLocalAddress) {
	o.LocalAddresses = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *NetworkInfo) GetWarnings() string {
	if o == nil || o.Warnings == nil {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetWarningsOk() (*string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *NetworkInfo) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *NetworkInfo) SetWarnings(v string) {
	o.Warnings = &v
}

func (o NetworkInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["subversion"] = o.Subversion
	}
	if true {
		toSerialize["protocol_version"] = o.ProtocolVersion
	}
	if o.LocalServices != nil {
		toSerialize["local_services"] = o.LocalServices
	}
	if o.LocalServicesNames != nil {
		toSerialize["local_services_names"] = o.LocalServicesNames
	}
	if true {
		toSerialize["local_relay"] = o.LocalRelay
	}
	if true {
		toSerialize["time_offset"] = o.TimeOffset
	}
	if true {
		toSerialize["connections"] = o.Connections
	}
	if true {
		toSerialize["connections_in"] = o.ConnectionsIn
	}
	if true {
		toSerialize["connections_out"] = o.ConnectionsOut
	}
	if true {
		toSerialize["network_active"] = o.NetworkActive
	}
	if true {
		toSerialize["networks"] = o.Networks
	}
	if true {
		toSerialize["relay_fee"] = o.RelayFee
	}
	if true {
		toSerialize["incremental_fee"] = o.IncrementalFee
	}
	if o.LocalAddresses != nil {
		toSerialize["local_addresses"] = o.LocalAddresses
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkInfo struct {
	value *NetworkInfo
	isSet bool
}

func (v NullableNetworkInfo) Get() *NetworkInfo {
	return v.value
}

func (v *NullableNetworkInfo) Set(val *NetworkInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInfo(val *NetworkInfo) *NullableNetworkInfo {
	return &NullableNetworkInfo{value: val, isSet: true}
}

func (v NullableNetworkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NewAddressInput struct for NewAddressInput
type NewAddressInput struct {
	//  Address-types has to be one of: * p2wkh:  Pay to witness key hash (bech32) * np2wkh: Pay to nested witness key hash     
	Type NullableOnchainAddressType `json:"type"`
}

// NewNewAddressInput instantiates a new NewAddressInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewAddressInput(type_ NullableOnchainAddressType) *NewAddressInput {
	this := NewAddressInput{}
	this.Type = type_
	return &this
}

// NewNewAddressInputWithDefaults instantiates a new NewAddressInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewAddressInputWithDefaults() *NewAddressInput {
	this := NewAddressInput{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for OnchainAddressType will be returned
func (o *NewAddressInput) GetType() OnchainAddressType {
	if o == nil || o.Type.Get() == nil {
		var ret OnchainAddressType
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NewAddressInput) GetTypeOk() (*OnchainAddressType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *NewAddressInput) SetType(v OnchainAddressType) {
	o.Type.Set(&v)
}

func (o NewAddressInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNewAddressInput struct {
	value *NewAddressInput
	isSet bool
}

func (v NullableNewAddressInput) Get() *NewAddressInput {
	return v.value
}

func (v *NullableNewAddressInput) Set(val *NewAddressInput) {
	v.value = val
	v.isSet = true
}

func (v NullableNewAddressInput) IsSet() bool {
	return v.isSet
}

func (v *NullableNewAddressInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewAddressInput(val *NewAddressInput) *NullableNewAddressInput {
	return &NullableNewAddressInput{value: val, isSet: true}
}

func (v NullableNewAddressInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewAddressInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



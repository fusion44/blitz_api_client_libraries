/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OnchainAddressType An enumeration.
type OnchainAddressType string

// List of OnchainAddressType
const (
	P2WKH OnchainAddressType = "p2wkh"
	NP2WKH OnchainAddressType = "np2wkh"
)

// All allowed values of OnchainAddressType enum
var AllowedOnchainAddressTypeEnumValues = []OnchainAddressType{
	"p2wkh",
	"np2wkh",
}

func (v *OnchainAddressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OnchainAddressType(value)
	for _, existing := range AllowedOnchainAddressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OnchainAddressType", value)
}

// NewOnchainAddressTypeFromValue returns a pointer to a valid OnchainAddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnchainAddressTypeFromValue(v string) (*OnchainAddressType, error) {
	ev := OnchainAddressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnchainAddressType: valid values are %v", v, AllowedOnchainAddressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnchainAddressType) IsValid() bool {
	for _, existing := range AllowedOnchainAddressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnchainAddressType value
func (v OnchainAddressType) Ptr() *OnchainAddressType {
	return &v
}

type NullableOnchainAddressType struct {
	value *OnchainAddressType
	isSet bool
}

func (v NullableOnchainAddressType) Get() *OnchainAddressType {
	return v.value
}

func (v *NullableOnchainAddressType) Set(val *OnchainAddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableOnchainAddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableOnchainAddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnchainAddressType(val *OnchainAddressType) *NullableOnchainAddressType {
	return &NullableOnchainAddressType{value: val, isSet: true}
}

func (v NullableOnchainAddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnchainAddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


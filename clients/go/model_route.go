/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Route struct for Route
type Route struct {
	TotalTimeLock int32 `json:"total_time_lock"`
	TotalFees int32 `json:"total_fees"`
	TotalAmt int32 `json:"total_amt"`
	Hops []Hop `json:"hops"`
	TotalFeesMsat int32 `json:"total_fees_msat"`
	TotalAmtMsat int32 `json:"total_amt_msat"`
	MppRecord *MPPRecord `json:"mpp_record,omitempty"`
	AmpRecord *AMPRecord `json:"amp_record,omitempty"`
	CustomRecords []CustomRecordsEntry `json:"custom_records"`
}

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute(totalTimeLock int32, totalFees int32, totalAmt int32, hops []Hop, totalFeesMsat int32, totalAmtMsat int32, customRecords []CustomRecordsEntry) *Route {
	this := Route{}
	this.TotalTimeLock = totalTimeLock
	this.TotalFees = totalFees
	this.TotalAmt = totalAmt
	this.Hops = hops
	this.TotalFeesMsat = totalFeesMsat
	this.TotalAmtMsat = totalAmtMsat
	this.CustomRecords = customRecords
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetTotalTimeLock returns the TotalTimeLock field value
func (o *Route) GetTotalTimeLock() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalTimeLock
}

// GetTotalTimeLockOk returns a tuple with the TotalTimeLock field value
// and a boolean to check if the value has been set.
func (o *Route) GetTotalTimeLockOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalTimeLock, true
}

// SetTotalTimeLock sets field value
func (o *Route) SetTotalTimeLock(v int32) {
	o.TotalTimeLock = v
}

// GetTotalFees returns the TotalFees field value
func (o *Route) GetTotalFees() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalFees
}

// GetTotalFeesOk returns a tuple with the TotalFees field value
// and a boolean to check if the value has been set.
func (o *Route) GetTotalFeesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFees, true
}

// SetTotalFees sets field value
func (o *Route) SetTotalFees(v int32) {
	o.TotalFees = v
}

// GetTotalAmt returns the TotalAmt field value
func (o *Route) GetTotalAmt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalAmt
}

// GetTotalAmtOk returns a tuple with the TotalAmt field value
// and a boolean to check if the value has been set.
func (o *Route) GetTotalAmtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAmt, true
}

// SetTotalAmt sets field value
func (o *Route) SetTotalAmt(v int32) {
	o.TotalAmt = v
}

// GetHops returns the Hops field value
func (o *Route) GetHops() []Hop {
	if o == nil {
		var ret []Hop
		return ret
	}

	return o.Hops
}

// GetHopsOk returns a tuple with the Hops field value
// and a boolean to check if the value has been set.
func (o *Route) GetHopsOk() ([]Hop, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hops, true
}

// SetHops sets field value
func (o *Route) SetHops(v []Hop) {
	o.Hops = v
}

// GetTotalFeesMsat returns the TotalFeesMsat field value
func (o *Route) GetTotalFeesMsat() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalFeesMsat
}

// GetTotalFeesMsatOk returns a tuple with the TotalFeesMsat field value
// and a boolean to check if the value has been set.
func (o *Route) GetTotalFeesMsatOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFeesMsat, true
}

// SetTotalFeesMsat sets field value
func (o *Route) SetTotalFeesMsat(v int32) {
	o.TotalFeesMsat = v
}

// GetTotalAmtMsat returns the TotalAmtMsat field value
func (o *Route) GetTotalAmtMsat() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalAmtMsat
}

// GetTotalAmtMsatOk returns a tuple with the TotalAmtMsat field value
// and a boolean to check if the value has been set.
func (o *Route) GetTotalAmtMsatOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAmtMsat, true
}

// SetTotalAmtMsat sets field value
func (o *Route) SetTotalAmtMsat(v int32) {
	o.TotalAmtMsat = v
}

// GetMppRecord returns the MppRecord field value if set, zero value otherwise.
func (o *Route) GetMppRecord() MPPRecord {
	if o == nil || o.MppRecord == nil {
		var ret MPPRecord
		return ret
	}
	return *o.MppRecord
}

// GetMppRecordOk returns a tuple with the MppRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetMppRecordOk() (*MPPRecord, bool) {
	if o == nil || o.MppRecord == nil {
		return nil, false
	}
	return o.MppRecord, true
}

// HasMppRecord returns a boolean if a field has been set.
func (o *Route) HasMppRecord() bool {
	if o != nil && o.MppRecord != nil {
		return true
	}

	return false
}

// SetMppRecord gets a reference to the given MPPRecord and assigns it to the MppRecord field.
func (o *Route) SetMppRecord(v MPPRecord) {
	o.MppRecord = &v
}

// GetAmpRecord returns the AmpRecord field value if set, zero value otherwise.
func (o *Route) GetAmpRecord() AMPRecord {
	if o == nil || o.AmpRecord == nil {
		var ret AMPRecord
		return ret
	}
	return *o.AmpRecord
}

// GetAmpRecordOk returns a tuple with the AmpRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetAmpRecordOk() (*AMPRecord, bool) {
	if o == nil || o.AmpRecord == nil {
		return nil, false
	}
	return o.AmpRecord, true
}

// HasAmpRecord returns a boolean if a field has been set.
func (o *Route) HasAmpRecord() bool {
	if o != nil && o.AmpRecord != nil {
		return true
	}

	return false
}

// SetAmpRecord gets a reference to the given AMPRecord and assigns it to the AmpRecord field.
func (o *Route) SetAmpRecord(v AMPRecord) {
	o.AmpRecord = &v
}

// GetCustomRecords returns the CustomRecords field value
func (o *Route) GetCustomRecords() []CustomRecordsEntry {
	if o == nil {
		var ret []CustomRecordsEntry
		return ret
	}

	return o.CustomRecords
}

// GetCustomRecordsOk returns a tuple with the CustomRecords field value
// and a boolean to check if the value has been set.
func (o *Route) GetCustomRecordsOk() ([]CustomRecordsEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomRecords, true
}

// SetCustomRecords sets field value
func (o *Route) SetCustomRecords(v []CustomRecordsEntry) {
	o.CustomRecords = v
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total_time_lock"] = o.TotalTimeLock
	}
	if true {
		toSerialize["total_fees"] = o.TotalFees
	}
	if true {
		toSerialize["total_amt"] = o.TotalAmt
	}
	if true {
		toSerialize["hops"] = o.Hops
	}
	if true {
		toSerialize["total_fees_msat"] = o.TotalFeesMsat
	}
	if true {
		toSerialize["total_amt_msat"] = o.TotalAmtMsat
	}
	if o.MppRecord != nil {
		toSerialize["mpp_record"] = o.MppRecord
	}
	if o.AmpRecord != nil {
		toSerialize["amp_record"] = o.AmpRecord
	}
	if true {
		toSerialize["custom_records"] = o.CustomRecords
	}
	return json.Marshal(toSerialize)
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HTLCAttempt struct for HTLCAttempt
type HTLCAttempt struct {
	AttemptId int32 `json:"attempt_id"`
	Status HTLCStatus `json:"status"`
	Route Route `json:"route"`
	AttemptTimeNs int32 `json:"attempt_time_ns"`
	ResolveTimeNs int32 `json:"resolve_time_ns"`
	Failure HTLCAttemptFailure `json:"failure"`
	Preimage string `json:"preimage"`
}

// NewHTLCAttempt instantiates a new HTLCAttempt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHTLCAttempt(attemptId int32, status HTLCStatus, route Route, attemptTimeNs int32, resolveTimeNs int32, failure HTLCAttemptFailure, preimage string) *HTLCAttempt {
	this := HTLCAttempt{}
	this.AttemptId = attemptId
	this.Status = status
	this.Route = route
	this.AttemptTimeNs = attemptTimeNs
	this.ResolveTimeNs = resolveTimeNs
	this.Failure = failure
	this.Preimage = preimage
	return &this
}

// NewHTLCAttemptWithDefaults instantiates a new HTLCAttempt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTLCAttemptWithDefaults() *HTLCAttempt {
	this := HTLCAttempt{}
	return &this
}

// GetAttemptId returns the AttemptId field value
func (o *HTLCAttempt) GetAttemptId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttemptId
}

// GetAttemptIdOk returns a tuple with the AttemptId field value
// and a boolean to check if the value has been set.
func (o *HTLCAttempt) GetAttemptIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttemptId, true
}

// SetAttemptId sets field value
func (o *HTLCAttempt) SetAttemptId(v int32) {
	o.AttemptId = v
}

// GetStatus returns the Status field value
func (o *HTLCAttempt) GetStatus() HTLCStatus {
	if o == nil {
		var ret HTLCStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *HTLCAttempt) GetStatusOk() (*HTLCStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *HTLCAttempt) SetStatus(v HTLCStatus) {
	o.Status = v
}

// GetRoute returns the Route field value
func (o *HTLCAttempt) GetRoute() Route {
	if o == nil {
		var ret Route
		return ret
	}

	return o.Route
}

// GetRouteOk returns a tuple with the Route field value
// and a boolean to check if the value has been set.
func (o *HTLCAttempt) GetRouteOk() (*Route, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Route, true
}

// SetRoute sets field value
func (o *HTLCAttempt) SetRoute(v Route) {
	o.Route = v
}

// GetAttemptTimeNs returns the AttemptTimeNs field value
func (o *HTLCAttempt) GetAttemptTimeNs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttemptTimeNs
}

// GetAttemptTimeNsOk returns a tuple with the AttemptTimeNs field value
// and a boolean to check if the value has been set.
func (o *HTLCAttempt) GetAttemptTimeNsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttemptTimeNs, true
}

// SetAttemptTimeNs sets field value
func (o *HTLCAttempt) SetAttemptTimeNs(v int32) {
	o.AttemptTimeNs = v
}

// GetResolveTimeNs returns the ResolveTimeNs field value
func (o *HTLCAttempt) GetResolveTimeNs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResolveTimeNs
}

// GetResolveTimeNsOk returns a tuple with the ResolveTimeNs field value
// and a boolean to check if the value has been set.
func (o *HTLCAttempt) GetResolveTimeNsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResolveTimeNs, true
}

// SetResolveTimeNs sets field value
func (o *HTLCAttempt) SetResolveTimeNs(v int32) {
	o.ResolveTimeNs = v
}

// GetFailure returns the Failure field value
func (o *HTLCAttempt) GetFailure() HTLCAttemptFailure {
	if o == nil {
		var ret HTLCAttemptFailure
		return ret
	}

	return o.Failure
}

// GetFailureOk returns a tuple with the Failure field value
// and a boolean to check if the value has been set.
func (o *HTLCAttempt) GetFailureOk() (*HTLCAttemptFailure, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Failure, true
}

// SetFailure sets field value
func (o *HTLCAttempt) SetFailure(v HTLCAttemptFailure) {
	o.Failure = v
}

// GetPreimage returns the Preimage field value
func (o *HTLCAttempt) GetPreimage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Preimage
}

// GetPreimageOk returns a tuple with the Preimage field value
// and a boolean to check if the value has been set.
func (o *HTLCAttempt) GetPreimageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Preimage, true
}

// SetPreimage sets field value
func (o *HTLCAttempt) SetPreimage(v string) {
	o.Preimage = v
}

func (o HTLCAttempt) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attempt_id"] = o.AttemptId
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["route"] = o.Route
	}
	if true {
		toSerialize["attempt_time_ns"] = o.AttemptTimeNs
	}
	if true {
		toSerialize["resolve_time_ns"] = o.ResolveTimeNs
	}
	if true {
		toSerialize["failure"] = o.Failure
	}
	if true {
		toSerialize["preimage"] = o.Preimage
	}
	return json.Marshal(toSerialize)
}

type NullableHTLCAttempt struct {
	value *HTLCAttempt
	isSet bool
}

func (v NullableHTLCAttempt) Get() *HTLCAttempt {
	return v.value
}

func (v *NullableHTLCAttempt) Set(val *HTLCAttempt) {
	v.value = val
	v.isSet = true
}

func (v NullableHTLCAttempt) IsSet() bool {
	return v.isSet
}

func (v *NullableHTLCAttempt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTLCAttempt(val *HTLCAttempt) *NullableHTLCAttempt {
	return &NullableHTLCAttempt{value: val, isSet: true}
}

func (v NullableHTLCAttempt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTLCAttempt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



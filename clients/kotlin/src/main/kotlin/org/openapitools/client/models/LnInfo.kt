/**
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Chain
import org.openapitools.client.models.FeaturesEntry

import com.squareup.moshi.Json

/**
 * 
 *
 * @param implementation Lightning software implementation (LND, CLN)
 * @param version The version of the software that the node is running.
 * @param commitHash The SHA1 commit hash that the daemon is compiled with.
 * @param alias The alias of the node.
 * @param color The color of the current node in hex code format.
 * @param numPendingChannels Number of pending channels.
 * @param numActiveChannels Number of active channels.
 * @param numInactiveChannels Number of inactive channels.
 * @param numPeers Number of peers.
 * @param blockHeight The node's current view of the height of the best block. Only available with LND.
 * @param identityPubkey 
 * @param identityUri 
 * @param blockHash The node's current view of the hash of the best block. Only available with LND.
 * @param bestHeaderTimestamp Timestamp of the block best known to the wallet. Only available with LND.
 * @param syncedToChain Whether the wallet's view is synced to the main chain. Only available with LND.
 * @param syncedToGraph Whether we consider ourselves synced with the public channel graph. Only available with LND.
 * @param chains A list of active chains the node is connected to
 * @param uris The URIs of the current node.
 * @param features Features that our node has advertised in our init message node announcements and invoices. Not yet implemented with CLN
 */

data class LnInfo (

    /* Lightning software implementation (LND, CLN) */
    @Json(name = "implementation")
    val implementation: kotlin.String,

    /* The version of the software that the node is running. */
    @Json(name = "version")
    val version: kotlin.String,

    /* The SHA1 commit hash that the daemon is compiled with. */
    @Json(name = "commit_hash")
    val commitHash: kotlin.String,

    /* The alias of the node. */
    @Json(name = "alias")
    val alias: kotlin.String,

    /* The color of the current node in hex code format. */
    @Json(name = "color")
    val color: kotlin.String,

    /* Number of pending channels. */
    @Json(name = "num_pending_channels")
    val numPendingChannels: kotlin.Int,

    /* Number of active channels. */
    @Json(name = "num_active_channels")
    val numActiveChannels: kotlin.Int,

    /* Number of inactive channels. */
    @Json(name = "num_inactive_channels")
    val numInactiveChannels: kotlin.Int,

    /* Number of peers. */
    @Json(name = "num_peers")
    val numPeers: kotlin.Int,

    /* The node's current view of the height of the best block. Only available with LND. */
    @Json(name = "block_height")
    val blockHeight: kotlin.Int,

    @Json(name = "identity_pubkey")
    val identityPubkey: kotlin.String? = "The identity pubkey of the current node.",

    @Json(name = "identity_uri")
    val identityUri: kotlin.String? = "The complete URI (pubkey@physicaladdress:port) the current node.",

    /* The node's current view of the hash of the best block. Only available with LND. */
    @Json(name = "block_hash")
    val blockHash: kotlin.String? = "",

    /* Timestamp of the block best known to the wallet. Only available with LND. */
    @Json(name = "best_header_timestamp")
    val bestHeaderTimestamp: kotlin.Int? = null,

    /* Whether the wallet's view is synced to the main chain. Only available with LND. */
    @Json(name = "synced_to_chain")
    val syncedToChain: kotlin.Boolean? = null,

    /* Whether we consider ourselves synced with the public channel graph. Only available with LND. */
    @Json(name = "synced_to_graph")
    val syncedToGraph: kotlin.Boolean? = null,

    /* A list of active chains the node is connected to */
    @Json(name = "chains")
    val chains: kotlin.collections.List<Chain>? = arrayListOf(),

    /* The URIs of the current node. */
    @Json(name = "uris")
    val uris: kotlin.collections.List<kotlin.String>? = arrayListOf(),

    /* Features that our node has advertised in our init message node announcements and invoices. Not yet implemented with CLN */
    @Json(name = "features")
    val features: kotlin.collections.List<FeaturesEntry>? = arrayListOf()

)


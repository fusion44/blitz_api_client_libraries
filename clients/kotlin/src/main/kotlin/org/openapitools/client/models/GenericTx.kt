/**
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.TxCategory
import org.openapitools.client.models.TxStatus
import org.openapitools.client.models.TxType

import com.squareup.moshi.Json

/**
 * 
 *
 * @param id  Unique identifier for this transaction.  Depending on the type of the transaction it will be different: #### On-chain The transaction hash  #### Lightning Invoice and Payment The payment request 
 * @param category Whether this is an onchain (**onchain**) or lightning (**ln**) transaction.
 * @param type Whether this is an outgoing (**send**) transaction or an incoming (**receive**) transaction.
 * @param amount  The value of the transaction, depending on the category in satoshis or millisatoshis.  #### On-chain Transaction amount in satoshis  #### Lightning Invoice * value in millisatoshis of the invoice if *unsettled* * amount in millisatoshis paid if invoice is *settled*  #### Lightning Payment * amount sent in millisatoshis  
 * @param timeStamp  The unix timestamp in seconds for the transaction.  The timestamp can mean different things in different situations:  #### Lightning Invoice * Creation date for in-flight or failed invoices * Settle date for succeeded invoices  #### On-chain * Creation date for transaction waiting in the mempool * Timestamp of the block where this transaction is included  #### Lightning Payment  
 * @param status  The status of the transaction. Depending on the transaction category this can be different values:  May have different meanings in different situations: #### unknown An unknown state was found.  #### in_flight * A lightning payment is being sent * An invoice is waiting for the incoming payment * An on-chain transaction is waiting in the mempool  #### succeeded * A lighting payment was successfully sent * An incoming payment was received for an invoice * An on-chain transaction was included in a block  #### failed * A lightning payment attempt which could not be completed (no route found, insufficient funds, ...) * An invoice is expired or some other error happened 
 * @param index The index of the transaction.
 * @param comment Optional comment for this transaction
 * @param blockHeight Block height, if included in a block. Only applicable for category **onchain**.
 * @param numConfs Number of confirmations. Only applicable for category **onchain**.
 * @param totalFees Total fees paid for this transaction
 */

data class GenericTx (

    /*  Unique identifier for this transaction.  Depending on the type of the transaction it will be different: #### On-chain The transaction hash  #### Lightning Invoice and Payment The payment request  */
    @Json(name = "id")
    val id: kotlin.String,

    /* Whether this is an onchain (**onchain**) or lightning (**ln**) transaction. */
    @Json(name = "category")
    val category: TxCategory?,

    /* Whether this is an outgoing (**send**) transaction or an incoming (**receive**) transaction. */
    @Json(name = "type")
    val type: TxType?,

    /*  The value of the transaction, depending on the category in satoshis or millisatoshis.  #### On-chain Transaction amount in satoshis  #### Lightning Invoice * value in millisatoshis of the invoice if *unsettled* * amount in millisatoshis paid if invoice is *settled*  #### Lightning Payment * amount sent in millisatoshis   */
    @Json(name = "amount")
    val amount: kotlin.Int,

    /*  The unix timestamp in seconds for the transaction.  The timestamp can mean different things in different situations:  #### Lightning Invoice * Creation date for in-flight or failed invoices * Settle date for succeeded invoices  #### On-chain * Creation date for transaction waiting in the mempool * Timestamp of the block where this transaction is included  #### Lightning Payment   */
    @Json(name = "time_stamp")
    val timeStamp: kotlin.Int,

    /*  The status of the transaction. Depending on the transaction category this can be different values:  May have different meanings in different situations: #### unknown An unknown state was found.  #### in_flight * A lightning payment is being sent * An invoice is waiting for the incoming payment * An on-chain transaction is waiting in the mempool  #### succeeded * A lighting payment was successfully sent * An incoming payment was received for an invoice * An on-chain transaction was included in a block  #### failed * A lightning payment attempt which could not be completed (no route found, insufficient funds, ...) * An invoice is expired or some other error happened  */
    @Json(name = "status")
    val status: TxStatus?,

    /* The index of the transaction. */
    @Json(name = "index")
    val index: kotlin.Int? = 0,

    /* Optional comment for this transaction */
    @Json(name = "comment")
    val comment: kotlin.String? = "",

    /* Block height, if included in a block. Only applicable for category **onchain**. */
    @Json(name = "block_height")
    val blockHeight: kotlin.Int? = null,

    /* Number of confirmations. Only applicable for category **onchain**. */
    @Json(name = "num_confs")
    val numConfs: kotlin.Int? = null,

    /* Total fees paid for this transaction */
    @Json(name = "total_fees")
    val totalFees: kotlin.Int? = null

)


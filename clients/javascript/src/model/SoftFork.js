/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Bip9 from './Bip9';

/**
 * The SoftFork model module.
 * @module model/SoftFork
 * @version 1
 */
class SoftFork {
    /**
     * Constructs a new <code>SoftFork</code>.
     * @alias module:model/SoftFork
     * @param name {String} Name of the softfork
     * @param type {String} One of \"buried\", \"bip9\"
     * @param active {Boolean} True **if** the rules are enforced for the mempool and the next block
     */
    constructor(name, type, active) { 
        
        SoftFork.initialize(this, name, type, active);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, active) { 
        obj['name'] = name;
        obj['type'] = type;
        obj['active'] = active;
    }

    /**
     * Constructs a <code>SoftFork</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoftFork} obj Optional instance to populate.
     * @return {module:model/SoftFork} The populated <code>SoftFork</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoftFork();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('bip9')) {
                obj['bip9'] = Bip9.constructFromObject(data['bip9']);
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Name of the softfork
 * @member {String} name
 */
SoftFork.prototype['name'] = undefined;

/**
 * One of \"buried\", \"bip9\"
 * @member {String} type
 */
SoftFork.prototype['type'] = undefined;

/**
 * True **if** the rules are enforced for the mempool and the next block
 * @member {Boolean} active
 */
SoftFork.prototype['active'] = undefined;

/**
 * @member {module:model/Bip9} bip9
 */
SoftFork.prototype['bip9'] = undefined;

/**
 * Height of the first block which the rules are or will be enforced (only for `buried` type, or `bip9` type with `active` status)
 * @member {Number} height
 */
SoftFork.prototype['height'] = undefined;






export default SoftFork;


/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TxCategory from './TxCategory';
import TxStatus from './TxStatus';
import TxType from './TxType';

/**
 * The GenericTx model module.
 * @module model/GenericTx
 * @version 1
 */
class GenericTx {
    /**
     * Constructs a new <code>GenericTx</code>.
     * @alias module:model/GenericTx
     * @param id {String}  Unique identifier for this transaction.  Depending on the type of the transaction it will be different: #### On-chain The transaction hash  #### Lightning Invoice and Payment The payment request 
     * @param category {module:model/TxCategory} Whether this is an onchain (**onchain**) or lightning (**ln**) transaction.
     * @param type {module:model/TxType} Whether this is an outgoing (**send**) transaction or an incoming (**receive**) transaction.
     * @param amount {Number}  The value of the transaction, depending on the category in satoshis or millisatoshis.  #### On-chain Transaction amount in satoshis  #### Lightning Invoice * value in millisatoshis of the invoice if *unsettled* * amount in millisatoshis paid if invoice is *settled*  #### Lightning Payment * amount sent in millisatoshis  
     * @param timeStamp {Number}  The unix timestamp in seconds for the transaction.  The timestamp can mean different things in different situations:  #### Lightning Invoice * Creation date for in-flight or failed invoices * Settle date for succeeded invoices  #### On-chain * Creation date for transaction waiting in the mempool * Timestamp of the block where this transaction is included  #### Lightning Payment  
     * @param status {module:model/TxStatus}  The status of the transaction. Depending on the transaction category this can be different values:  May have different meanings in different situations: #### unknown An unknown state was found.  #### in_flight * A lightning payment is being sent * An invoice is waiting for the incoming payment * An on-chain transaction is waiting in the mempool  #### succeeded * A lighting payment was successfully sent * An incoming payment was received for an invoice * An on-chain transaction was included in a block  #### failed * A lightning payment attempt which could not be completed (no route found, insufficient funds, ...) * An invoice is expired or some other error happened 
     */
    constructor(id, category, type, amount, timeStamp, status) { 
        
        GenericTx.initialize(this, id, category, type, amount, timeStamp, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, category, type, amount, timeStamp, status) { 
        obj['id'] = id;
        obj['category'] = category;
        obj['type'] = type;
        obj['amount'] = amount;
        obj['time_stamp'] = timeStamp;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>GenericTx</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenericTx} obj Optional instance to populate.
     * @return {module:model/GenericTx} The populated <code>GenericTx</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenericTx();

            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], TxCategory);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], TxType);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('time_stamp')) {
                obj['time_stamp'] = ApiClient.convertToType(data['time_stamp'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], TxStatus);
            }
            if (data.hasOwnProperty('block_height')) {
                obj['block_height'] = ApiClient.convertToType(data['block_height'], 'Number');
            }
            if (data.hasOwnProperty('num_confs')) {
                obj['num_confs'] = ApiClient.convertToType(data['num_confs'], 'Number');
            }
            if (data.hasOwnProperty('total_fees')) {
                obj['total_fees'] = ApiClient.convertToType(data['total_fees'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The index of the transaction.
 * @member {Number} index
 * @default 0
 */
GenericTx.prototype['index'] = 0;

/**
 *  Unique identifier for this transaction.  Depending on the type of the transaction it will be different: #### On-chain The transaction hash  #### Lightning Invoice and Payment The payment request 
 * @member {String} id
 */
GenericTx.prototype['id'] = undefined;

/**
 * Whether this is an onchain (**onchain**) or lightning (**ln**) transaction.
 * @member {module:model/TxCategory} category
 */
GenericTx.prototype['category'] = undefined;

/**
 * Whether this is an outgoing (**send**) transaction or an incoming (**receive**) transaction.
 * @member {module:model/TxType} type
 */
GenericTx.prototype['type'] = undefined;

/**
 *  The value of the transaction, depending on the category in satoshis or millisatoshis.  #### On-chain Transaction amount in satoshis  #### Lightning Invoice * value in millisatoshis of the invoice if *unsettled* * amount in millisatoshis paid if invoice is *settled*  #### Lightning Payment * amount sent in millisatoshis  
 * @member {Number} amount
 */
GenericTx.prototype['amount'] = undefined;

/**
 *  The unix timestamp in seconds for the transaction.  The timestamp can mean different things in different situations:  #### Lightning Invoice * Creation date for in-flight or failed invoices * Settle date for succeeded invoices  #### On-chain * Creation date for transaction waiting in the mempool * Timestamp of the block where this transaction is included  #### Lightning Payment  
 * @member {Number} time_stamp
 */
GenericTx.prototype['time_stamp'] = undefined;

/**
 * Optional comment for this transaction
 * @member {String} comment
 * @default ''
 */
GenericTx.prototype['comment'] = '';

/**
 *  The status of the transaction. Depending on the transaction category this can be different values:  May have different meanings in different situations: #### unknown An unknown state was found.  #### in_flight * A lightning payment is being sent * An invoice is waiting for the incoming payment * An on-chain transaction is waiting in the mempool  #### succeeded * A lighting payment was successfully sent * An incoming payment was received for an invoice * An on-chain transaction was included in a block  #### failed * A lightning payment attempt which could not be completed (no route found, insufficient funds, ...) * An invoice is expired or some other error happened 
 * @member {module:model/TxStatus} status
 */
GenericTx.prototype['status'] = undefined;

/**
 * Block height, if included in a block. Only applicable for category **onchain**.
 * @member {Number} block_height
 */
GenericTx.prototype['block_height'] = undefined;

/**
 * Number of confirmations. Only applicable for category **onchain**.
 * @member {Number} num_confs
 */
GenericTx.prototype['num_confs'] = undefined;

/**
 * Total fees paid for this transaction
 * @member {Number} total_fees
 */
GenericTx.prototype['total_fees'] = undefined;






export default GenericTx;


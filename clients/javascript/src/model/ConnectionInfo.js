/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnectionInfo model module.
 * @module model/ConnectionInfo
 * @version 1
 */
class ConnectionInfo {
    /**
     * Constructs a new <code>ConnectionInfo</code>.
     * @alias module:model/ConnectionInfo
     */
    constructor() { 
        
        ConnectionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionInfo} obj Optional instance to populate.
     * @return {module:model/ConnectionInfo} The populated <code>ConnectionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionInfo();

            if (data.hasOwnProperty('lnd_admin_macaroon')) {
                obj['lnd_admin_macaroon'] = ApiClient.convertToType(data['lnd_admin_macaroon'], 'String');
            }
            if (data.hasOwnProperty('lnd_invoice_macaroon')) {
                obj['lnd_invoice_macaroon'] = ApiClient.convertToType(data['lnd_invoice_macaroon'], 'String');
            }
            if (data.hasOwnProperty('lnd_readonly_macaroon')) {
                obj['lnd_readonly_macaroon'] = ApiClient.convertToType(data['lnd_readonly_macaroon'], 'String');
            }
            if (data.hasOwnProperty('lnd_tls_cert')) {
                obj['lnd_tls_cert'] = ApiClient.convertToType(data['lnd_tls_cert'], 'String');
            }
            if (data.hasOwnProperty('lnd_rest_onion')) {
                obj['lnd_rest_onion'] = ApiClient.convertToType(data['lnd_rest_onion'], 'String');
            }
            if (data.hasOwnProperty('lnd_btcpay_connection_string')) {
                obj['lnd_btcpay_connection_string'] = ApiClient.convertToType(data['lnd_btcpay_connection_string'], 'String');
            }
            if (data.hasOwnProperty('lnd_zeus_connection_string')) {
                obj['lnd_zeus_connection_string'] = ApiClient.convertToType(data['lnd_zeus_connection_string'], 'String');
            }
            if (data.hasOwnProperty('cl_rest_zeus_connection_string')) {
                obj['cl_rest_zeus_connection_string'] = ApiClient.convertToType(data['cl_rest_zeus_connection_string'], 'String');
            }
            if (data.hasOwnProperty('cl_rest_macaroon')) {
                obj['cl_rest_macaroon'] = ApiClient.convertToType(data['cl_rest_macaroon'], 'String');
            }
            if (data.hasOwnProperty('cl_rest_onion')) {
                obj['cl_rest_onion'] = ApiClient.convertToType(data['cl_rest_onion'], 'String');
            }
        }
        return obj;
    }


}

/**
 * lnd macaroon with admin rights in hexstring format
 * @member {String} lnd_admin_macaroon
 * @default ''
 */
ConnectionInfo.prototype['lnd_admin_macaroon'] = '';

/**
 * lnd macaroon that only creates invoices in hexstring format
 * @member {String} lnd_invoice_macaroon
 * @default ''
 */
ConnectionInfo.prototype['lnd_invoice_macaroon'] = '';

/**
 * lnd macaroon with only read-only rights in hexstring format
 * @member {String} lnd_readonly_macaroon
 * @default ''
 */
ConnectionInfo.prototype['lnd_readonly_macaroon'] = '';

/**
 * lnd tls cert in hexstring format
 * @member {String} lnd_tls_cert
 * @default ''
 */
ConnectionInfo.prototype['lnd_tls_cert'] = '';

/**
 * lnd rest api onion address
 * @member {String} lnd_rest_onion
 * @default ''
 */
ConnectionInfo.prototype['lnd_rest_onion'] = '';

/**
 * connect BtcPay server locally to your lnd lightning node
 * @member {String} lnd_btcpay_connection_string
 * @default ''
 */
ConnectionInfo.prototype['lnd_btcpay_connection_string'] = '';

/**
 * connect Zeus app to your lnd lightning node
 * @member {String} lnd_zeus_connection_string
 * @default ''
 */
ConnectionInfo.prototype['lnd_zeus_connection_string'] = '';

/**
 * connect Zeus app to your core lightning node over rest
 * @member {String} cl_rest_zeus_connection_string
 * @default ''
 */
ConnectionInfo.prototype['cl_rest_zeus_connection_string'] = '';

/**
 * core lightning rest macaroon
 * @member {String} cl_rest_macaroon
 * @default ''
 */
ConnectionInfo.prototype['cl_rest_macaroon'] = '';

/**
 * core lightning rest onion address
 * @member {String} cl_rest_onion
 * @default ''
 */
ConnectionInfo.prototype['cl_rest_onion'] = '';






export default ConnectionInfo;


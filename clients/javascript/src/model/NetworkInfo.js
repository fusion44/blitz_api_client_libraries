/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BtcLocalAddress from './BtcLocalAddress';
import BtcNetwork from './BtcNetwork';

/**
 * The NetworkInfo model module.
 * @module model/NetworkInfo
 * @version 1
 */
class NetworkInfo {
    /**
     * Constructs a new <code>NetworkInfo</code>.
     * @alias module:model/NetworkInfo
     * @param version {Number} The bitcoin core server version
     * @param subversion {String} The server subversion string
     * @param protocolVersion {Number} The protocol version
     * @param localRelay {Boolean} True if transaction relay is requested from peers
     * @param timeOffset {Number} The time offset
     * @param connections {Number} The total number of connections
     * @param connectionsIn {Number} The number of inbound connections
     * @param connectionsOut {Number} The number of outbound connections
     * @param networkActive {Boolean} Whether p2p networking is enabled
     * @param networks {Array.<module:model/BtcNetwork>} Information per network
     * @param relayFee {Number} Minimum relay fee for transactions in BTC/kB
     * @param incrementalFee {Number} Minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB
     */
    constructor(version, subversion, protocolVersion, localRelay, timeOffset, connections, connectionsIn, connectionsOut, networkActive, networks, relayFee, incrementalFee) { 
        
        NetworkInfo.initialize(this, version, subversion, protocolVersion, localRelay, timeOffset, connections, connectionsIn, connectionsOut, networkActive, networks, relayFee, incrementalFee);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, version, subversion, protocolVersion, localRelay, timeOffset, connections, connectionsIn, connectionsOut, networkActive, networks, relayFee, incrementalFee) { 
        obj['version'] = version;
        obj['subversion'] = subversion;
        obj['protocol_version'] = protocolVersion;
        obj['local_relay'] = localRelay;
        obj['time_offset'] = timeOffset;
        obj['connections'] = connections;
        obj['connections_in'] = connectionsIn;
        obj['connections_out'] = connectionsOut;
        obj['network_active'] = networkActive;
        obj['networks'] = networks;
        obj['relay_fee'] = relayFee;
        obj['incremental_fee'] = incrementalFee;
    }

    /**
     * Constructs a <code>NetworkInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkInfo} obj Optional instance to populate.
     * @return {module:model/NetworkInfo} The populated <code>NetworkInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkInfo();

            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('subversion')) {
                obj['subversion'] = ApiClient.convertToType(data['subversion'], 'String');
            }
            if (data.hasOwnProperty('protocol_version')) {
                obj['protocol_version'] = ApiClient.convertToType(data['protocol_version'], 'Number');
            }
            if (data.hasOwnProperty('local_services')) {
                obj['local_services'] = ApiClient.convertToType(data['local_services'], 'String');
            }
            if (data.hasOwnProperty('local_services_names')) {
                obj['local_services_names'] = ApiClient.convertToType(data['local_services_names'], ['String']);
            }
            if (data.hasOwnProperty('local_relay')) {
                obj['local_relay'] = ApiClient.convertToType(data['local_relay'], 'Boolean');
            }
            if (data.hasOwnProperty('time_offset')) {
                obj['time_offset'] = ApiClient.convertToType(data['time_offset'], 'Number');
            }
            if (data.hasOwnProperty('connections')) {
                obj['connections'] = ApiClient.convertToType(data['connections'], 'Number');
            }
            if (data.hasOwnProperty('connections_in')) {
                obj['connections_in'] = ApiClient.convertToType(data['connections_in'], 'Number');
            }
            if (data.hasOwnProperty('connections_out')) {
                obj['connections_out'] = ApiClient.convertToType(data['connections_out'], 'Number');
            }
            if (data.hasOwnProperty('network_active')) {
                obj['network_active'] = ApiClient.convertToType(data['network_active'], 'Boolean');
            }
            if (data.hasOwnProperty('networks')) {
                obj['networks'] = ApiClient.convertToType(data['networks'], [BtcNetwork]);
            }
            if (data.hasOwnProperty('relay_fee')) {
                obj['relay_fee'] = ApiClient.convertToType(data['relay_fee'], 'Number');
            }
            if (data.hasOwnProperty('incremental_fee')) {
                obj['incremental_fee'] = ApiClient.convertToType(data['incremental_fee'], 'Number');
            }
            if (data.hasOwnProperty('local_addresses')) {
                obj['local_addresses'] = ApiClient.convertToType(data['local_addresses'], [BtcLocalAddress]);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The bitcoin core server version
 * @member {Number} version
 */
NetworkInfo.prototype['version'] = undefined;

/**
 * The server subversion string
 * @member {String} subversion
 */
NetworkInfo.prototype['subversion'] = undefined;

/**
 * The protocol version
 * @member {Number} protocol_version
 */
NetworkInfo.prototype['protocol_version'] = undefined;

/**
 * The services we offer to the network, hex formatted
 * @member {String} local_services
 */
NetworkInfo.prototype['local_services'] = undefined;

/**
 * The services we offer to the network, in human-readable form
 * @member {Array.<String>} local_services_names
 */
NetworkInfo.prototype['local_services_names'] = undefined;

/**
 * True if transaction relay is requested from peers
 * @member {Boolean} local_relay
 */
NetworkInfo.prototype['local_relay'] = undefined;

/**
 * The time offset
 * @member {Number} time_offset
 */
NetworkInfo.prototype['time_offset'] = undefined;

/**
 * The total number of connections
 * @member {Number} connections
 */
NetworkInfo.prototype['connections'] = undefined;

/**
 * The number of inbound connections
 * @member {Number} connections_in
 */
NetworkInfo.prototype['connections_in'] = undefined;

/**
 * The number of outbound connections
 * @member {Number} connections_out
 */
NetworkInfo.prototype['connections_out'] = undefined;

/**
 * Whether p2p networking is enabled
 * @member {Boolean} network_active
 */
NetworkInfo.prototype['network_active'] = undefined;

/**
 * Information per network
 * @member {Array.<module:model/BtcNetwork>} networks
 */
NetworkInfo.prototype['networks'] = undefined;

/**
 * Minimum relay fee for transactions in BTC/kB
 * @member {Number} relay_fee
 */
NetworkInfo.prototype['relay_fee'] = undefined;

/**
 * Minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB
 * @member {Number} incremental_fee
 */
NetworkInfo.prototype['incremental_fee'] = undefined;

/**
 * List of local addresses
 * @member {Array.<module:model/BtcLocalAddress>} local_addresses
 */
NetworkInfo.prototype['local_addresses'] = undefined;

/**
 * Any network and blockchain warnings
 * @member {String} warnings
 */
NetworkInfo.prototype['warnings'] = undefined;






export default NetworkInfo;


/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Bip9Data from './Bip9Data';
import Statistics from './Statistics';

/**
 * The Bip9 model module.
 * @module model/Bip9
 * @version 1
 */
class Bip9 {
    /**
     * Constructs a new <code>Bip9</code>.
     * Status of bip9 softforks(only for \&quot;bip9\&quot; type)
     * @alias module:model/Bip9
     * @implements module:model/Bip9Data
     * @param status {String} One of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\" 
     * @param startTime {Number} The minimum median time past of a block at which the bit gains its meaning
     * @param timeout {Number} The median time past of a block at which the deployment is considered failed if not yet locked in
     * @param since {Number} Height of the first block to which the status applies
     * @param minActivationHeight {Number} Minimum height of blocks for which the rules may be enforced
     */
    constructor(status, startTime, timeout, since, minActivationHeight) { 
        Bip9Data.initialize(this, status, startTime, timeout, since, minActivationHeight);
        Bip9.initialize(this, status, startTime, timeout, since, minActivationHeight);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, startTime, timeout, since, minActivationHeight) { 
        obj['status'] = status;
        obj['start_time'] = startTime;
        obj['timeout'] = timeout;
        obj['since'] = since;
        obj['min_activation_height'] = minActivationHeight;
    }

    /**
     * Constructs a <code>Bip9</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bip9} obj Optional instance to populate.
     * @return {module:model/Bip9} The populated <code>Bip9</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bip9();
            Bip9Data.constructFromObject(data, obj);

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('bit')) {
                obj['bit'] = ApiClient.convertToType(data['bit'], 'Number');
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'Number');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('since')) {
                obj['since'] = ApiClient.convertToType(data['since'], 'Number');
            }
            if (data.hasOwnProperty('min_activation_height')) {
                obj['min_activation_height'] = ApiClient.convertToType(data['min_activation_height'], 'Number');
            }
            if (data.hasOwnProperty('statistics')) {
                obj['statistics'] = Statistics.constructFromObject(data['statistics']);
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * One of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\" 
 * @member {String} status
 */
Bip9.prototype['status'] = undefined;

/**
 * the bit(0-28) in the block version field used to signal this softfork(only for `started` status)
 * @member {Number} bit
 */
Bip9.prototype['bit'] = undefined;

/**
 * The minimum median time past of a block at which the bit gains its meaning
 * @member {Number} start_time
 */
Bip9.prototype['start_time'] = undefined;

/**
 * The median time past of a block at which the deployment is considered failed if not yet locked in
 * @member {Number} timeout
 */
Bip9.prototype['timeout'] = undefined;

/**
 * Height of the first block to which the status applies
 * @member {Number} since
 */
Bip9.prototype['since'] = undefined;

/**
 * Minimum height of blocks for which the rules may be enforced
 * @member {Number} min_activation_height
 */
Bip9.prototype['min_activation_height'] = undefined;

/**
 * @member {module:model/Statistics} statistics
 */
Bip9.prototype['statistics'] = undefined;

/**
 * Height of the first block which the rules are or will be enforced(only for `buried` type, or `bip9` type with `active` status)
 * @member {Number} height
 */
Bip9.prototype['height'] = undefined;

/**
 * True if the rules are enforced for the mempool and the next block
 * @member {Boolean} active
 */
Bip9.prototype['active'] = undefined;


// Implement Bip9Data interface:
/**
 * One of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\" 
 * @member {String} status
 */
Bip9Data.prototype['status'] = undefined;
/**
 * the bit(0-28) in the block version field used to signal this softfork(only for `started` status)
 * @member {Number} bit
 */
Bip9Data.prototype['bit'] = undefined;
/**
 * The minimum median time past of a block at which the bit gains its meaning
 * @member {Number} start_time
 */
Bip9Data.prototype['start_time'] = undefined;
/**
 * The median time past of a block at which the deployment is considered failed if not yet locked in
 * @member {Number} timeout
 */
Bip9Data.prototype['timeout'] = undefined;
/**
 * Height of the first block to which the status applies
 * @member {Number} since
 */
Bip9Data.prototype['since'] = undefined;
/**
 * Minimum height of blocks for which the rules may be enforced
 * @member {Number} min_activation_height
 */
Bip9Data.prototype['min_activation_height'] = undefined;
/**
 * @member {module:model/Statistics} statistics
 */
Bip9Data.prototype['statistics'] = undefined;
/**
 * Height of the first block which the rules are or will be enforced(only for `buried` type, or `bip9` type with `active` status)
 * @member {Number} height
 */
Bip9Data.prototype['height'] = undefined;
/**
 * True if the rules are enforced for the mempool and the next block
 * @member {Boolean} active
 */
Bip9Data.prototype['active'] = undefined;




export default Bip9;


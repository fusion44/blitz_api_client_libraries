/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SoftFork from './SoftFork';

/**
 * The BlockchainInfo model module.
 * @module model/BlockchainInfo
 * @version 1
 */
class BlockchainInfo {
    /**
     * Constructs a new <code>BlockchainInfo</code>.
     * @alias module:model/BlockchainInfo
     * @param chain {String} Current network name(main, test, regtest)
     * @param blocks {Number} The height of the most-work fully-validated chain. The genesis block has height 0
     * @param headers {Number} The current number of headers we have validated
     * @param bestBlockHash {String} The hash of the currently best block
     * @param difficulty {Number} The current difficulty
     * @param mediantime {Number} Median time for the current best block
     * @param verificationProgress {Number} Estimate of verification progress[0..1]
     * @param initialBlockDownload {Boolean} Estimate of whether this node is in Initial Block Download mode
     * @param chainwork {String} total amount of work in active chain, in hexadecimal
     * @param sizeOnDisk {Number} The estimated size of the block and undo files on disk
     * @param pruned {Boolean} If the blocks are subject to pruning
     * @param warnings {String} Any network and blockchain warnings
     * @param softforks {Array.<module:model/SoftFork>} Status of softforks
     */
    constructor(chain, blocks, headers, bestBlockHash, difficulty, mediantime, verificationProgress, initialBlockDownload, chainwork, sizeOnDisk, pruned, warnings, softforks) { 
        
        BlockchainInfo.initialize(this, chain, blocks, headers, bestBlockHash, difficulty, mediantime, verificationProgress, initialBlockDownload, chainwork, sizeOnDisk, pruned, warnings, softforks);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chain, blocks, headers, bestBlockHash, difficulty, mediantime, verificationProgress, initialBlockDownload, chainwork, sizeOnDisk, pruned, warnings, softforks) { 
        obj['chain'] = chain;
        obj['blocks'] = blocks;
        obj['headers'] = headers;
        obj['best_block_hash'] = bestBlockHash;
        obj['difficulty'] = difficulty;
        obj['mediantime'] = mediantime;
        obj['verification_progress'] = verificationProgress;
        obj['initial_block_download'] = initialBlockDownload;
        obj['chainwork'] = chainwork;
        obj['size_on_disk'] = sizeOnDisk;
        obj['pruned'] = pruned;
        obj['warnings'] = warnings;
        obj['softforks'] = softforks;
    }

    /**
     * Constructs a <code>BlockchainInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlockchainInfo} obj Optional instance to populate.
     * @return {module:model/BlockchainInfo} The populated <code>BlockchainInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlockchainInfo();

            if (data.hasOwnProperty('chain')) {
                obj['chain'] = ApiClient.convertToType(data['chain'], 'String');
            }
            if (data.hasOwnProperty('blocks')) {
                obj['blocks'] = ApiClient.convertToType(data['blocks'], 'Number');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], 'Number');
            }
            if (data.hasOwnProperty('best_block_hash')) {
                obj['best_block_hash'] = ApiClient.convertToType(data['best_block_hash'], 'String');
            }
            if (data.hasOwnProperty('difficulty')) {
                obj['difficulty'] = ApiClient.convertToType(data['difficulty'], 'Number');
            }
            if (data.hasOwnProperty('mediantime')) {
                obj['mediantime'] = ApiClient.convertToType(data['mediantime'], 'Number');
            }
            if (data.hasOwnProperty('verification_progress')) {
                obj['verification_progress'] = ApiClient.convertToType(data['verification_progress'], 'Number');
            }
            if (data.hasOwnProperty('initial_block_download')) {
                obj['initial_block_download'] = ApiClient.convertToType(data['initial_block_download'], 'Boolean');
            }
            if (data.hasOwnProperty('chainwork')) {
                obj['chainwork'] = ApiClient.convertToType(data['chainwork'], 'String');
            }
            if (data.hasOwnProperty('size_on_disk')) {
                obj['size_on_disk'] = ApiClient.convertToType(data['size_on_disk'], 'Number');
            }
            if (data.hasOwnProperty('pruned')) {
                obj['pruned'] = ApiClient.convertToType(data['pruned'], 'Boolean');
            }
            if (data.hasOwnProperty('prune_height')) {
                obj['prune_height'] = ApiClient.convertToType(data['prune_height'], 'Number');
            }
            if (data.hasOwnProperty('automatic_pruning')) {
                obj['automatic_pruning'] = ApiClient.convertToType(data['automatic_pruning'], 'Boolean');
            }
            if (data.hasOwnProperty('prune_target_size')) {
                obj['prune_target_size'] = ApiClient.convertToType(data['prune_target_size'], 'Number');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], 'String');
            }
            if (data.hasOwnProperty('softforks')) {
                obj['softforks'] = ApiClient.convertToType(data['softforks'], [SoftFork]);
            }
        }
        return obj;
    }


}

/**
 * Current network name(main, test, regtest)
 * @member {String} chain
 */
BlockchainInfo.prototype['chain'] = undefined;

/**
 * The height of the most-work fully-validated chain. The genesis block has height 0
 * @member {Number} blocks
 */
BlockchainInfo.prototype['blocks'] = undefined;

/**
 * The current number of headers we have validated
 * @member {Number} headers
 */
BlockchainInfo.prototype['headers'] = undefined;

/**
 * The hash of the currently best block
 * @member {String} best_block_hash
 */
BlockchainInfo.prototype['best_block_hash'] = undefined;

/**
 * The current difficulty
 * @member {Number} difficulty
 */
BlockchainInfo.prototype['difficulty'] = undefined;

/**
 * Median time for the current best block
 * @member {Number} mediantime
 */
BlockchainInfo.prototype['mediantime'] = undefined;

/**
 * Estimate of verification progress[0..1]
 * @member {Number} verification_progress
 */
BlockchainInfo.prototype['verification_progress'] = undefined;

/**
 * Estimate of whether this node is in Initial Block Download mode
 * @member {Boolean} initial_block_download
 */
BlockchainInfo.prototype['initial_block_download'] = undefined;

/**
 * total amount of work in active chain, in hexadecimal
 * @member {String} chainwork
 */
BlockchainInfo.prototype['chainwork'] = undefined;

/**
 * The estimated size of the block and undo files on disk
 * @member {Number} size_on_disk
 */
BlockchainInfo.prototype['size_on_disk'] = undefined;

/**
 * If the blocks are subject to pruning
 * @member {Boolean} pruned
 */
BlockchainInfo.prototype['pruned'] = undefined;

/**
 * Lowest-height complete block stored(only present if pruning is enabled)
 * @member {Number} prune_height
 */
BlockchainInfo.prototype['prune_height'] = undefined;

/**
 * Whether automatic pruning is enabled(only present if pruning is enabled)
 * @member {Boolean} automatic_pruning
 */
BlockchainInfo.prototype['automatic_pruning'] = undefined;

/**
 * The target size used by pruning(only present if automatic pruning is enabled)
 * @member {Number} prune_target_size
 */
BlockchainInfo.prototype['prune_target_size'] = undefined;

/**
 * Any network and blockchain warnings
 * @member {String} warnings
 */
BlockchainInfo.prototype['warnings'] = undefined;

/**
 * Status of softforks
 * @member {Array.<module:model/SoftFork>} softforks
 */
BlockchainInfo.prototype['softforks'] = undefined;






export default BlockchainInfo;


/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LightningInfoLite model module.
 * @module model/LightningInfoLite
 * @version 1
 */
class LightningInfoLite {
    /**
     * Constructs a new <code>LightningInfoLite</code>.
     * @alias module:model/LightningInfoLite
     * @param implementation {String} Lightning software implementation (LND, c-lightning)
     * @param version {String} Version of the implementation
     * @param identityPubkey {String} The identity pubkey of the current node
     * @param numPendingChannels {Number} Number of pending channels
     * @param numActiveChannels {Number} Number of active channels
     * @param numInactiveChannels {Number} Number of inactive channels
     * @param numPeers {Number} Number of peers
     * @param blockHeight {Number} The node's current view of the height of the best block
     */
    constructor(implementation, version, identityPubkey, numPendingChannels, numActiveChannels, numInactiveChannels, numPeers, blockHeight) { 
        
        LightningInfoLite.initialize(this, implementation, version, identityPubkey, numPendingChannels, numActiveChannels, numInactiveChannels, numPeers, blockHeight);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, implementation, version, identityPubkey, numPendingChannels, numActiveChannels, numInactiveChannels, numPeers, blockHeight) { 
        obj['implementation'] = implementation;
        obj['version'] = version;
        obj['identity_pubkey'] = identityPubkey;
        obj['num_pending_channels'] = numPendingChannels;
        obj['num_active_channels'] = numActiveChannels;
        obj['num_inactive_channels'] = numInactiveChannels;
        obj['num_peers'] = numPeers;
        obj['block_height'] = blockHeight;
    }

    /**
     * Constructs a <code>LightningInfoLite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LightningInfoLite} obj Optional instance to populate.
     * @return {module:model/LightningInfoLite} The populated <code>LightningInfoLite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LightningInfoLite();

            if (data.hasOwnProperty('implementation')) {
                obj['implementation'] = ApiClient.convertToType(data['implementation'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('identity_pubkey')) {
                obj['identity_pubkey'] = ApiClient.convertToType(data['identity_pubkey'], 'String');
            }
            if (data.hasOwnProperty('num_pending_channels')) {
                obj['num_pending_channels'] = ApiClient.convertToType(data['num_pending_channels'], 'Number');
            }
            if (data.hasOwnProperty('num_active_channels')) {
                obj['num_active_channels'] = ApiClient.convertToType(data['num_active_channels'], 'Number');
            }
            if (data.hasOwnProperty('num_inactive_channels')) {
                obj['num_inactive_channels'] = ApiClient.convertToType(data['num_inactive_channels'], 'Number');
            }
            if (data.hasOwnProperty('num_peers')) {
                obj['num_peers'] = ApiClient.convertToType(data['num_peers'], 'Number');
            }
            if (data.hasOwnProperty('block_height')) {
                obj['block_height'] = ApiClient.convertToType(data['block_height'], 'Number');
            }
            if (data.hasOwnProperty('synced_to_chain')) {
                obj['synced_to_chain'] = ApiClient.convertToType(data['synced_to_chain'], 'Boolean');
            }
            if (data.hasOwnProperty('synced_to_graph')) {
                obj['synced_to_graph'] = ApiClient.convertToType(data['synced_to_graph'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Lightning software implementation (LND, c-lightning)
 * @member {String} implementation
 */
LightningInfoLite.prototype['implementation'] = undefined;

/**
 * Version of the implementation
 * @member {String} version
 */
LightningInfoLite.prototype['version'] = undefined;

/**
 * The identity pubkey of the current node
 * @member {String} identity_pubkey
 */
LightningInfoLite.prototype['identity_pubkey'] = undefined;

/**
 * Number of pending channels
 * @member {Number} num_pending_channels
 */
LightningInfoLite.prototype['num_pending_channels'] = undefined;

/**
 * Number of active channels
 * @member {Number} num_active_channels
 */
LightningInfoLite.prototype['num_active_channels'] = undefined;

/**
 * Number of inactive channels
 * @member {Number} num_inactive_channels
 */
LightningInfoLite.prototype['num_inactive_channels'] = undefined;

/**
 * Number of peers
 * @member {Number} num_peers
 */
LightningInfoLite.prototype['num_peers'] = undefined;

/**
 * The node's current view of the height of the best block
 * @member {Number} block_height
 */
LightningInfoLite.prototype['block_height'] = undefined;

/**
 * Whether the wallet's view is synced to the main chain
 * @member {Boolean} synced_to_chain
 */
LightningInfoLite.prototype['synced_to_chain'] = undefined;

/**
 * Whether we consider ourselves synced with the public channel graph.
 * @member {Boolean} synced_to_graph
 */
LightningInfoLite.prototype['synced_to_graph'] = undefined;






export default LightningInfoLite;


/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Channel from '../model/Channel';
import FeeRevenue from '../model/FeeRevenue';
import GenericTx from '../model/GenericTx';
import HTTPValidationError from '../model/HTTPValidationError';
import Invoice from '../model/Invoice';
import LightningInfoLite from '../model/LightningInfoLite';
import LnInfo from '../model/LnInfo';
import NewAddressInput from '../model/NewAddressInput';
import OnChainTransaction from '../model/OnChainTransaction';
import Payment from '../model/Payment';
import PaymentRequest from '../model/PaymentRequest';
import SendCoinsInput from '../model/SendCoinsInput';
import SendCoinsResponse from '../model/SendCoinsResponse';
import UnlockWalletInput from '../model/UnlockWalletInput';
import WalletBalance from '../model/WalletBalance';

/**
* Lightning service.
* @module api/LightningApi
* @version 1
*/
export default class LightningApi {

    /**
    * Constructs a new LightningApi. 
    * @alias module:api/LightningApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the lightningAddInvoiceLightningAddInvoicePost operation.
     * @callback module:api/LightningApi~lightningAddInvoiceLightningAddInvoicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Addinvoice adds a new Invoice to the database.
     * For additional information see [LND docs](https://api.lightning.community/#addinvoice)
     * @param {Number} valueMsat 
     * @param {Object} opts Optional parameters
     * @param {String} opts.memo  (default to '')
     * @param {Number} opts.expiry  (default to 3600)
     * @param {Boolean} opts.isKeysend  (default to false)
     * @param {module:api/LightningApi~lightningAddInvoiceLightningAddInvoicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoice}
     */
    lightningAddInvoiceLightningAddInvoicePost(valueMsat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'valueMsat' is set
      if (valueMsat === undefined || valueMsat === null) {
        throw new Error("Missing the required parameter 'valueMsat' when calling lightningAddInvoiceLightningAddInvoicePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'value_msat': valueMsat,
        'memo': opts['memo'],
        'expiry': opts['expiry'],
        'is_keysend': opts['isKeysend']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invoice;
      return this.apiClient.callApi(
        '/lightning/add-invoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningCloseChannelLightningCloseChannelPost operation.
     * @callback module:api/LightningApi~lightningCloseChannelLightningCloseChannelPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * close a channel
     * For additional information see [LND docs](https://api.lightning.community/#closechannel)
     * @param {String} channelId 
     * @param {Boolean} forceClose 
     * @param {module:api/LightningApi~lightningCloseChannelLightningCloseChannelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    lightningCloseChannelLightningCloseChannelPost(channelId, forceClose, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling lightningCloseChannelLightningCloseChannelPost");
      }
      // verify the required parameter 'forceClose' is set
      if (forceClose === undefined || forceClose === null) {
        throw new Error("Missing the required parameter 'forceClose' when calling lightningCloseChannelLightningCloseChannelPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'channel_id': channelId,
        'force_close': forceClose
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/lightning/close-channel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningDecodePayReqLightningDecodePayReqGet operation.
     * @callback module:api/LightningApi~lightningDecodePayReqLightningDecodePayReqGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DecodePayReq takes an encoded payment request string and attempts to decode it, returning a full description of the conditions encoded within the payment request.
     * @param {String} payReq The payment request string to be decoded
     * @param {module:api/LightningApi~lightningDecodePayReqLightningDecodePayReqGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentRequest}
     */
    lightningDecodePayReqLightningDecodePayReqGet(payReq, callback) {
      let postBody = null;
      // verify the required parameter 'payReq' is set
      if (payReq === undefined || payReq === null) {
        throw new Error("Missing the required parameter 'payReq' when calling lightningDecodePayReqLightningDecodePayReqGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pay_req': payReq
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentRequest;
      return this.apiClient.callApi(
        '/lightning/decode-pay-req', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningGetBalanceLightningGetBalanceGet operation.
     * @callback module:api/LightningApi~lightningGetBalanceLightningGetBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current on chain and channel balances of the lighting wallet.
     * @param {module:api/LightningApi~lightningGetBalanceLightningGetBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletBalance}
     */
    lightningGetBalanceLightningGetBalanceGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletBalance;
      return this.apiClient.callApi(
        '/lightning/get-balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningGetFeeRevenueLightningGetFeeRevenueGet operation.
     * @callback module:api/LightningApi~lightningGetFeeRevenueLightningGetFeeRevenueGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeeRevenue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the daily, weekly and monthly fee revenue earned.
     *  Currently, year and total fees are always null. Backends don't return these values by default. Implementation in BlitzAPI is a [to-do](https://github.com/fusion44/blitz_api/issues/64).     
     * @param {module:api/LightningApi~lightningGetFeeRevenueLightningGetFeeRevenueGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeeRevenue}
     */
    lightningGetFeeRevenueLightningGetFeeRevenueGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeeRevenue;
      return this.apiClient.callApi(
        '/lightning/get-fee-revenue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningGetInfoLightningGetInfoGet operation.
     * @callback module:api/LightningApi~lightningGetInfoLightningGetInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LnInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request information about the currently running lightning node.
     * @param {module:api/LightningApi~lightningGetInfoLightningGetInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LnInfo}
     */
    lightningGetInfoLightningGetInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LnInfo;
      return this.apiClient.callApi(
        '/lightning/get-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningGetInfoLiteLightningGetInfoLiteGet operation.
     * @callback module:api/LightningApi~lightningGetInfoLiteLightningGetInfoLiteGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LightningInfoLite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lightweight current lightning info. Less verbose version of /lightning/get-info
     * @param {module:api/LightningApi~lightningGetInfoLiteLightningGetInfoLiteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LightningInfoLite}
     */
    lightningGetInfoLiteLightningGetInfoLiteGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LightningInfoLite;
      return this.apiClient.callApi(
        '/lightning/get-info-lite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningListAllTxLightningListAllTxGet operation.
     * @callback module:api/LightningApi~lightningListAllTxLightningListAllTxGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GenericTx>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all on-chain transactions, payments and invoices in the wallet
     * Returns a list with all on-chain transaction, payments and invoices combined into one list.     The index of each tx is only valid for each identical set of parameters.     
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.successfulOnly If set, only successful transaction will be returned in the response. (default to false)
     * @param {Number} opts.indexOffset The index of an transaction that will be used as either the start or end of a query to determine which invoices should be returned in the response. (default to 0)
     * @param {Number} opts.maxTx The max number of transaction to return in the response to this query. Will return all transactions when set to 0 or null. (default to 0)
     * @param {Boolean} opts.reversed If set, the transactions returned will result from seeking backwards from the specified index offset. This can be used to paginate backwards. (default to false)
     * @param {module:api/LightningApi~lightningListAllTxLightningListAllTxGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GenericTx>}
     */
    lightningListAllTxLightningListAllTxGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'successful_only': opts['successfulOnly'],
        'index_offset': opts['indexOffset'],
        'max_tx': opts['maxTx'],
        'reversed': opts['reversed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GenericTx];
      return this.apiClient.callApi(
        '/lightning/list-all-tx', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningListChannelsLightningListChannelsGet operation.
     * @callback module:api/LightningApi~lightningListChannelsLightningListChannelsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Channel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of open channels
     * @param {module:api/LightningApi~lightningListChannelsLightningListChannelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Channel>}
     */
    lightningListChannelsLightningListChannelsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Channel];
      return this.apiClient.callApi(
        '/lightning/list-channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningListInvoicesLightningListInvoicesGet operation.
     * @callback module:api/LightningApi~lightningListInvoicesLightningListInvoicesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invoice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all invoices from the wallet. Modeled after LND implementation.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.pendingOnly If set, only invoices that are not settled and not canceled will be returned in the response. (default to false)
     * @param {Number} opts.indexOffset The index of an invoice that will be used as either the start or end of a query to determine which invoices should be returned in the response. (default to 0)
     * @param {Number} opts.numMaxInvoices The max number of invoices to return in the response to this query. Will return all invoices when set to 0 or null. (default to 0)
     * @param {Boolean} opts.reversed If set, the invoices returned will result from seeking backwards from the specified index offset. This can be used to paginate backwards. (default to false)
     * @param {module:api/LightningApi~lightningListInvoicesLightningListInvoicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invoice>}
     */
    lightningListInvoicesLightningListInvoicesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pending_only': opts['pendingOnly'],
        'index_offset': opts['indexOffset'],
        'num_max_invoices': opts['numMaxInvoices'],
        'reversed': opts['reversed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invoice];
      return this.apiClient.callApi(
        '/lightning/list-invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningListOnchainTxLightningListOnchainTxGet operation.
     * @callback module:api/LightningApi~lightningListOnchainTxLightningListOnchainTxGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OnChainTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all onchain transactions from the wallet
     * @param {module:api/LightningApi~lightningListOnchainTxLightningListOnchainTxGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OnChainTransaction>}
     */
    lightningListOnchainTxLightningListOnchainTxGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OnChainTransaction];
      return this.apiClient.callApi(
        '/lightning/list-onchain-tx', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningListPaymentsLightningListPaymentsGet operation.
     * @callback module:api/LightningApi~lightningListPaymentsLightningListPaymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Payment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all outgoing payments. Modeled after LND implementation.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeIncomplete If true, then return payments that have not yet fully completed. This means that pending payments, as well as failed payments will show up if this field is set to true. This flag doesn't change the meaning of the indices, which are tied to individual payments. (default to true)
     * @param {Number} opts.indexOffset The index of a payment that will be used as either the start or end of a query to determine which payments should be returned in the response. The index_offset is exclusive. In the case of a zero index_offset, the query will start with the oldest payment when paginating forwards, or will end with the most recent payment when paginating backwards. (default to 0)
     * @param {Number} opts.maxPayments The maximal number of payments returned in the response to this query. (default to 0)
     * @param {Boolean} opts.reversed If set, the payments returned will result from seeking backwards from the specified index offset. This can be used to paginate backwards. The order of the returned payments is always oldest first (ascending index order). (default to false)
     * @param {module:api/LightningApi~lightningListPaymentsLightningListPaymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Payment>}
     */
    lightningListPaymentsLightningListPaymentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include_incomplete': opts['includeIncomplete'],
        'index_offset': opts['indexOffset'],
        'max_payments': opts['maxPayments'],
        'reversed': opts['reversed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Payment];
      return this.apiClient.callApi(
        '/lightning/list-payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningNewAddressLightningNewAddressPost operation.
     * @callback module:api/LightningApi~lightningNewAddressLightningNewAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new on-chain address
     *  Generate a wallet new address. Address-types has to be one of: * **p2wkh**:  Pay to witness key hash (bech32) * **np2wkh**: Pay to nested witness key hash     
     * @param {module:model/NewAddressInput} newAddressInput 
     * @param {module:api/LightningApi~lightningNewAddressLightningNewAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    lightningNewAddressLightningNewAddressPost(newAddressInput, callback) {
      let postBody = newAddressInput;
      // verify the required parameter 'newAddressInput' is set
      if (newAddressInput === undefined || newAddressInput === null) {
        throw new Error("Missing the required parameter 'newAddressInput' when calling lightningNewAddressLightningNewAddressPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/lightning/new-address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningOpenChannelLightningOpenChannelPost operation.
     * @callback module:api/LightningApi~lightningOpenChannelLightningOpenChannelPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * open a new lightning channel
     *  __open-channel__ attempts to open a channel with a peer.  ### LND: _target_conf_: The target number of blocks that the funding transaction should be confirmed by.  ### c-lightning: * Set _target_conf_ ==1: interpreted as urgent (aim for next block) * Set _target_conf_ >=2: interpreted as normal (next 4 blocks or so, **default**) * Set _target_cont_ >=10: interpreted as slow (next 100 blocks or so)  > 👉 See [https://lightning.readthedocs.io/lightning-txprepare.7.html](https://lightning.readthedocs.io/lightning-txprepare.7.html) 
     * @param {Number} localFundingAmount 
     * @param {String} nodeURI 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.targetConfs  (default to 3)
     * @param {module:api/LightningApi~lightningOpenChannelLightningOpenChannelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    lightningOpenChannelLightningOpenChannelPost(localFundingAmount, nodeURI, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'localFundingAmount' is set
      if (localFundingAmount === undefined || localFundingAmount === null) {
        throw new Error("Missing the required parameter 'localFundingAmount' when calling lightningOpenChannelLightningOpenChannelPost");
      }
      // verify the required parameter 'nodeURI' is set
      if (nodeURI === undefined || nodeURI === null) {
        throw new Error("Missing the required parameter 'nodeURI' when calling lightningOpenChannelLightningOpenChannelPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'local_funding_amount': localFundingAmount,
        'node_URI': nodeURI,
        'target_confs': opts['targetConfs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/lightning/open-channel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningSendCoinsLightningSendCoinsPost operation.
     * @callback module:api/LightningApi~lightningSendCoinsLightningSendCoinsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendCoinsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attempt to send on-chain funds.
     *  __send-coins__ executes a request to send coins to a particular address.  ### LND: If neither __target_conf__, or __sat_per_vbyte__ are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.  > 👉 See [https://api.lightning.community/?shell#sendcoins](https://api.lightning.community/?shell#sendcoins)  ### c-lightning: * Set __target_conf__ ==1: interpreted as urgent (aim for next block) * Set __target_conf__ >=2: interpreted as normal (next 4 blocks or so, **default**) * Set __target_cont__ >=10: interpreted as slow (next 100 blocks or so) * If __sat_per_vbyte__ is set then __target_conf__ is ignored and vbytes (sipabytes) will be used.  > 👉 See [https://lightning.readthedocs.io/lightning-txprepare.7.html](https://lightning.readthedocs.io/lightning-txprepare.7.html) 
     * @param {module:model/SendCoinsInput} sendCoinsInput 
     * @param {module:api/LightningApi~lightningSendCoinsLightningSendCoinsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendCoinsResponse}
     */
    lightningSendCoinsLightningSendCoinsPost(sendCoinsInput, callback) {
      let postBody = sendCoinsInput;
      // verify the required parameter 'sendCoinsInput' is set
      if (sendCoinsInput === undefined || sendCoinsInput === null) {
        throw new Error("Missing the required parameter 'sendCoinsInput' when calling lightningSendCoinsLightningSendCoinsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendCoinsResponse;
      return this.apiClient.callApi(
        '/lightning/send-coins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningSendPaymentLightningSendPaymentPost operation.
     * @callback module:api/LightningApi~lightningSendPaymentLightningSendPaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attempt to pay a payment request.
     *  This endpoints attempts to pay a payment request.  Intermediate status updates will be sent via the SSE channel. This endpoint returns the last success or error message from the node. 
     * @param {String} payReq 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timeoutSeconds  (default to 5)
     * @param {Number} opts.feeLimitMsat  (default to 8000)
     * @param {Number} opts.amountMsat 
     * @param {module:api/LightningApi~lightningSendPaymentLightningSendPaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payment}
     */
    lightningSendPaymentLightningSendPaymentPost(payReq, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'payReq' is set
      if (payReq === undefined || payReq === null) {
        throw new Error("Missing the required parameter 'payReq' when calling lightningSendPaymentLightningSendPaymentPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'pay_req': payReq,
        'timeout_seconds': opts['timeoutSeconds'],
        'fee_limit_msat': opts['feeLimitMsat'],
        'amount_msat': opts['amountMsat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Payment;
      return this.apiClient.callApi(
        '/lightning/send-payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lightningUnlockWalletLightningUnlockWalletPost operation.
     * @callback module:api/LightningApi~lightningUnlockWalletLightningUnlockWalletPostCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlocks a locked wallet.
     * @param {module:model/UnlockWalletInput} unlockWalletInput 
     * @param {module:api/LightningApi~lightningUnlockWalletLightningUnlockWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    lightningUnlockWalletLightningUnlockWalletPost(unlockWalletInput, callback) {
      let postBody = unlockWalletInput;
      // verify the required parameter 'unlockWalletInput' is set
      if (unlockWalletInput === undefined || unlockWalletInput === null) {
        throw new Error("Missing the required parameter 'unlockWalletInput' when calling lightningUnlockWalletLightningUnlockWalletPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/lightning/unlock-wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionInfo from '../model/ConnectionInfo';
import HTTPValidationError from '../model/HTTPValidationError';
import LoginInput from '../model/LoginInput';
import RawDebugLogData from '../model/RawDebugLogData';
import SystemInfo from '../model/SystemInfo';

/**
* System service.
* @module api/SystemApi
* @version 1
*/
export default class SystemApi {

    /**
    * Constructs a new SystemApi. 
    * @alias module:api/SystemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the systemChangePasswordSystemChangePasswordPost operation.
     * @callback module:api/SystemApi~systemChangePasswordSystemChangePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to change your password a, b or c
     * @param {String} type 
     * @param {String} oldPassword 
     * @param {String} newPassword 
     * @param {module:api/SystemApi~systemChangePasswordSystemChangePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    systemChangePasswordSystemChangePasswordPost(type, oldPassword, newPassword, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling systemChangePasswordSystemChangePasswordPost");
      }
      // verify the required parameter 'oldPassword' is set
      if (oldPassword === undefined || oldPassword === null) {
        throw new Error("Missing the required parameter 'oldPassword' when calling systemChangePasswordSystemChangePasswordPost");
      }
      // verify the required parameter 'newPassword' is set
      if (newPassword === undefined || newPassword === null) {
        throw new Error("Missing the required parameter 'newPassword' when calling systemChangePasswordSystemChangePasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'old_password': oldPassword,
        'new_password': newPassword
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/system/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemConnectionInfoSystemConnectionInfoGet operation.
     * @callback module:api/SystemApi~systemConnectionInfoSystemConnectionInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credential information to connect external apps.
     * @param {module:api/SystemApi~systemConnectionInfoSystemConnectionInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionInfo}
     */
    systemConnectionInfoSystemConnectionInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionInfo;
      return this.apiClient.callApi(
        '/system/connection-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemGetDebugLogsRawSystemGetDebugLogsRawGet operation.
     * @callback module:api/SystemApi~systemGetDebugLogsRawSystemGetDebugLogsRawGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawDebugLogData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw system logs as a text string.
     *  This endpoint will gather latest system logs and return it in a raw string. This endpoint will **not** return immediately because it gathers all data on time of the request. 
     * @param {module:api/SystemApi~systemGetDebugLogsRawSystemGetDebugLogsRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawDebugLogData}
     */
    systemGetDebugLogsRawSystemGetDebugLogsRawGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RawDebugLogData;
      return this.apiClient.callApi(
        '/system/get-debug-logs-raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemGetSystemInfoSystemGetSystemInfoGet operation.
     * @callback module:api/SystemApi~systemGetSystemInfoSystemGetSystemInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get system status information
     * @param {module:api/SystemApi~systemGetSystemInfoSystemGetSystemInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SystemInfo}
     */
    systemGetSystemInfoSystemGetSystemInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemInfo;
      return this.apiClient.callApi(
        '/system/get-system-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemHardwareInfoSubSystemHardwareInfoSubGet operation.
     * @callback module:api/SystemApi~systemHardwareInfoSubSystemHardwareInfoSubGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to hardware status information.
     * @param {module:api/SystemApi~systemHardwareInfoSubSystemHardwareInfoSubGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    systemHardwareInfoSubSystemHardwareInfoSubGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/system/hardware-info-sub', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemHardwareInfoSystemHardwareInfoGet operation.
     * @callback module:api/SystemApi~systemHardwareInfoSystemHardwareInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get hardware status information.
     * @param {module:api/SystemApi~systemHardwareInfoSystemHardwareInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    systemHardwareInfoSystemHardwareInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/system/hardware-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemLoginSystemLoginPost operation.
     * @callback module:api/SystemApi~systemLoginSystemLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs the user in with the current password
     * @param {module:model/LoginInput} loginInput 
     * @param {module:api/SystemApi~systemLoginSystemLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    systemLoginSystemLoginPost(loginInput, callback) {
      let postBody = loginInput;
      // verify the required parameter 'loginInput' is set
      if (loginInput === undefined || loginInput === null) {
        throw new Error("Missing the required parameter 'loginInput' when calling systemLoginSystemLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/system/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemRebootSystemRebootPost operation.
     * @callback module:api/SystemApi~systemRebootSystemRebootPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboots the system
     * Attempts to reboot the system.     Will send a `system_reboot_initiated` SSE message immediately to     all connected clients.     
     * @param {module:api/SystemApi~systemRebootSystemRebootPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    systemRebootSystemRebootPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/system/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemRefreshTokenSystemRefreshTokenPost operation.
     * @callback module:api/SystemApi~systemRefreshTokenSystemRefreshTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to refresh an authentication token
     * @param {module:api/SystemApi~systemRefreshTokenSystemRefreshTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    systemRefreshTokenSystemRefreshTokenPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/system/refresh-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemShutdownSystemShutdownPost operation.
     * @callback module:api/SystemApi~systemShutdownSystemShutdownPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shuts the system down
     * Attempts to shutdown the system.     Will send a `system_shutdown_initiated` SSE message immediately to all     connected clients.     
     * @param {module:api/SystemApi~systemShutdownSystemShutdownPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    systemShutdownSystemShutdownPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/system/shutdown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlockchainInfo from '../model/BlockchainInfo';
import BtcInfo from '../model/BtcInfo';
import FeeEstimationMode from '../model/FeeEstimationMode';
import HTTPValidationError from '../model/HTTPValidationError';
import NetworkInfo from '../model/NetworkInfo';

/**
* BitcoinCore service.
* @module api/BitcoinCoreApi
* @version 1
*/
export default class BitcoinCoreApi {

    /**
    * Constructs a new BitcoinCoreApi. 
    * @alias module:api/BitcoinCoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bitcoinBlockSubBitcoinBlockSubGet operation.
     * @callback module:api/BitcoinCoreApi~bitcoinBlockSubBitcoinBlockSubGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to incoming blocks.
     *  Similar to Bitcoin Core getblock  SSE endpoint to receive new block information as soon as it is appended to chain.  If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.<br> If verbosity is 1, returns an Object with information about block <hash>.<br> If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.<br> 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.verbosity  (default to 1)
     * @param {module:api/BitcoinCoreApi~bitcoinBlockSubBitcoinBlockSubGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    bitcoinBlockSubBitcoinBlockSubGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'verbosity': opts['verbosity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/bitcoin/block-sub', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bitcoinBtcInfoBitcoinBtcInfoGet operation.
     * @callback module:api/BitcoinCoreApi~bitcoinBtcInfoBitcoinBtcInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BtcInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bitcoin.Btc-Info
     * Get general information about bitcoin core. Combines most important information from `getblockchaininfo` and `getnetworkinfo`
     * @param {module:api/BitcoinCoreApi~bitcoinBtcInfoBitcoinBtcInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BtcInfo}
     */
    bitcoinBtcInfoBitcoinBtcInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BtcInfo;
      return this.apiClient.callApi(
        '/bitcoin/btc-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bitcoinEstimateFeeBitcoinEstimateFeeGet operation.
     * @callback module:api/BitcoinCoreApi~bitcoinEstimateFeeBitcoinEstimateFeeGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current fee estimation from Bitcoin Core
     * Estimates the fee for the given parameters.     See documentation on [bitcoin.org](https://developer.bitcoin.org/reference/rpc/estimatesmartfee.html)     
     * @param {Object} opts Optional parameters
     * @param {Number} opts.targetConf Confirmation target in blocks. (default to 6)
     * @param {module:model/FeeEstimationMode} opts.mode Whether to return a more conservative estimate which also satisfies a longer history. A conservative estimate potentially returns a higher feerate and is more likely to be sufficient for the desired target, but is not as responsive to short term drops in the prevailing fee market.
     * @param {module:api/BitcoinCoreApi~bitcoinEstimateFeeBitcoinEstimateFeeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    bitcoinEstimateFeeBitcoinEstimateFeeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'target_conf': opts['targetConf'],
        'mode': opts['mode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/bitcoin/estimate-fee', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bitcoinGetBlockCountBitcoinGetBlockCountGet operation.
     * @callback module:api/BitcoinCoreApi~bitcoinGetBlockCountBitcoinGetBlockCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current block count
     * See documentation on [bitcoincore.org](https://bitcoincore.org/en/doc/0.21.0/rpc/blockchain/getblockcount/)
     * @param {module:api/BitcoinCoreApi~bitcoinGetBlockCountBitcoinGetBlockCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    bitcoinGetBlockCountBitcoinGetBlockCountGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/bitcoin/get-block-count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bitcoinGetBlockchainInfoBitcoinGetBlockchainInfoGet operation.
     * @callback module:api/BitcoinCoreApi~bitcoinGetBlockchainInfoBitcoinGetBlockchainInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlockchainInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current blockchain status
     * See documentation on [bitcoincore.org](https://bitcoincore.org/en/doc/0.21.0/rpc/blockchain/getblockchaininfo/)
     * @param {module:api/BitcoinCoreApi~bitcoinGetBlockchainInfoBitcoinGetBlockchainInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlockchainInfo}
     */
    bitcoinGetBlockchainInfoBitcoinGetBlockchainInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlockchainInfo;
      return this.apiClient.callApi(
        '/bitcoin/get-blockchain-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bitcoinGetNetworkInfoBitcoinGetNetworkInfoGet operation.
     * @callback module:api/BitcoinCoreApi~bitcoinGetNetworkInfoBitcoinGetNetworkInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about the network
     * See documentation on [bitcoincore.org](https://bitcoincore.org/en/doc/0.21.0/rpc/network/getnetworkinfo/)
     * @param {module:api/BitcoinCoreApi~bitcoinGetNetworkInfoBitcoinGetNetworkInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkInfo}
     */
    bitcoinGetNetworkInfoBitcoinGetNetworkInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkInfo;
      return this.apiClient.callApi(
        '/bitcoin/get-network-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

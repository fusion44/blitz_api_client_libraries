/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AMP from './model/AMP';
import AMPRecord from './model/AMPRecord';
import APIPlatform from './model/APIPlatform';
import Amp from './model/Amp';
import Bip9 from './model/Bip9';
import Bip9Data from './model/Bip9Data';
import Bip9Statistics from './model/Bip9Statistics';
import BlockchainInfo from './model/BlockchainInfo';
import BtcInfo from './model/BtcInfo';
import BtcLocalAddress from './model/BtcLocalAddress';
import BtcNetwork from './model/BtcNetwork';
import Chain from './model/Chain';
import Channel from './model/Channel';
import ChannelUpdate from './model/ChannelUpdate';
import ConnectionInfo from './model/ConnectionInfo';
import CustomRecordsEntry from './model/CustomRecordsEntry';
import Feature from './model/Feature';
import FeaturesEntry from './model/FeaturesEntry';
import FeeEstimationMode from './model/FeeEstimationMode';
import FeeRevenue from './model/FeeRevenue';
import GenericTx from './model/GenericTx';
import HTLCAttempt from './model/HTLCAttempt';
import HTLCAttemptFailure from './model/HTLCAttemptFailure';
import HTLCStatus from './model/HTLCStatus';
import HTTPValidationError from './model/HTTPValidationError';
import Hop from './model/Hop';
import HopHint from './model/HopHint';
import Invoice from './model/Invoice';
import InvoiceHTLC from './model/InvoiceHTLC';
import InvoiceHTLCState from './model/InvoiceHTLCState';
import InvoiceState from './model/InvoiceState';
import LightningInfoLite from './model/LightningInfoLite';
import LnInfo from './model/LnInfo';
import LocationInner from './model/LocationInner';
import LoginInput from './model/LoginInput';
import MPPRecord from './model/MPPRecord';
import NetworkInfo from './model/NetworkInfo';
import NewAddressInput from './model/NewAddressInput';
import OnChainTransaction from './model/OnChainTransaction';
import OnchainAddressType from './model/OnchainAddressType';
import Payment from './model/Payment';
import PaymentFailureReason from './model/PaymentFailureReason';
import PaymentRequest from './model/PaymentRequest';
import PaymentStatus from './model/PaymentStatus';
import RawDebugLogData from './model/RawDebugLogData';
import Route from './model/Route';
import RouteHint from './model/RouteHint';
import SendCoinsInput from './model/SendCoinsInput';
import SendCoinsResponse from './model/SendCoinsResponse';
import SoftFork from './model/SoftFork';
import StartDoneData from './model/StartDoneData';
import Statistics from './model/Statistics';
import SystemInfo from './model/SystemInfo';
import TxCategory from './model/TxCategory';
import TxStatus from './model/TxStatus';
import TxType from './model/TxType';
import UninstallData from './model/UninstallData';
import UnlockWalletInput from './model/UnlockWalletInput';
import ValidationError from './model/ValidationError';
import WalletBalance from './model/WalletBalance';
import AppsApi from './api/AppsApi';
import BitcoinCoreApi from './api/BitcoinCoreApi';
import LightningApi from './api/LightningApi';
import SetupApi from './api/SetupApi';
import SystemApi from './api/SystemApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FastApi = require('index'); // See note below*.
* var xxxSvc = new FastApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FastApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FastApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FastApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AMP model constructor.
     * @property {module:model/AMP}
     */
    AMP,

    /**
     * The AMPRecord model constructor.
     * @property {module:model/AMPRecord}
     */
    AMPRecord,

    /**
     * The APIPlatform model constructor.
     * @property {module:model/APIPlatform}
     */
    APIPlatform,

    /**
     * The Amp model constructor.
     * @property {module:model/Amp}
     */
    Amp,

    /**
     * The Bip9 model constructor.
     * @property {module:model/Bip9}
     */
    Bip9,

    /**
     * The Bip9Data model constructor.
     * @property {module:model/Bip9Data}
     */
    Bip9Data,

    /**
     * The Bip9Statistics model constructor.
     * @property {module:model/Bip9Statistics}
     */
    Bip9Statistics,

    /**
     * The BlockchainInfo model constructor.
     * @property {module:model/BlockchainInfo}
     */
    BlockchainInfo,

    /**
     * The BtcInfo model constructor.
     * @property {module:model/BtcInfo}
     */
    BtcInfo,

    /**
     * The BtcLocalAddress model constructor.
     * @property {module:model/BtcLocalAddress}
     */
    BtcLocalAddress,

    /**
     * The BtcNetwork model constructor.
     * @property {module:model/BtcNetwork}
     */
    BtcNetwork,

    /**
     * The Chain model constructor.
     * @property {module:model/Chain}
     */
    Chain,

    /**
     * The Channel model constructor.
     * @property {module:model/Channel}
     */
    Channel,

    /**
     * The ChannelUpdate model constructor.
     * @property {module:model/ChannelUpdate}
     */
    ChannelUpdate,

    /**
     * The ConnectionInfo model constructor.
     * @property {module:model/ConnectionInfo}
     */
    ConnectionInfo,

    /**
     * The CustomRecordsEntry model constructor.
     * @property {module:model/CustomRecordsEntry}
     */
    CustomRecordsEntry,

    /**
     * The Feature model constructor.
     * @property {module:model/Feature}
     */
    Feature,

    /**
     * The FeaturesEntry model constructor.
     * @property {module:model/FeaturesEntry}
     */
    FeaturesEntry,

    /**
     * The FeeEstimationMode model constructor.
     * @property {module:model/FeeEstimationMode}
     */
    FeeEstimationMode,

    /**
     * The FeeRevenue model constructor.
     * @property {module:model/FeeRevenue}
     */
    FeeRevenue,

    /**
     * The GenericTx model constructor.
     * @property {module:model/GenericTx}
     */
    GenericTx,

    /**
     * The HTLCAttempt model constructor.
     * @property {module:model/HTLCAttempt}
     */
    HTLCAttempt,

    /**
     * The HTLCAttemptFailure model constructor.
     * @property {module:model/HTLCAttemptFailure}
     */
    HTLCAttemptFailure,

    /**
     * The HTLCStatus model constructor.
     * @property {module:model/HTLCStatus}
     */
    HTLCStatus,

    /**
     * The HTTPValidationError model constructor.
     * @property {module:model/HTTPValidationError}
     */
    HTTPValidationError,

    /**
     * The Hop model constructor.
     * @property {module:model/Hop}
     */
    Hop,

    /**
     * The HopHint model constructor.
     * @property {module:model/HopHint}
     */
    HopHint,

    /**
     * The Invoice model constructor.
     * @property {module:model/Invoice}
     */
    Invoice,

    /**
     * The InvoiceHTLC model constructor.
     * @property {module:model/InvoiceHTLC}
     */
    InvoiceHTLC,

    /**
     * The InvoiceHTLCState model constructor.
     * @property {module:model/InvoiceHTLCState}
     */
    InvoiceHTLCState,

    /**
     * The InvoiceState model constructor.
     * @property {module:model/InvoiceState}
     */
    InvoiceState,

    /**
     * The LightningInfoLite model constructor.
     * @property {module:model/LightningInfoLite}
     */
    LightningInfoLite,

    /**
     * The LnInfo model constructor.
     * @property {module:model/LnInfo}
     */
    LnInfo,

    /**
     * The LocationInner model constructor.
     * @property {module:model/LocationInner}
     */
    LocationInner,

    /**
     * The LoginInput model constructor.
     * @property {module:model/LoginInput}
     */
    LoginInput,

    /**
     * The MPPRecord model constructor.
     * @property {module:model/MPPRecord}
     */
    MPPRecord,

    /**
     * The NetworkInfo model constructor.
     * @property {module:model/NetworkInfo}
     */
    NetworkInfo,

    /**
     * The NewAddressInput model constructor.
     * @property {module:model/NewAddressInput}
     */
    NewAddressInput,

    /**
     * The OnChainTransaction model constructor.
     * @property {module:model/OnChainTransaction}
     */
    OnChainTransaction,

    /**
     * The OnchainAddressType model constructor.
     * @property {module:model/OnchainAddressType}
     */
    OnchainAddressType,

    /**
     * The Payment model constructor.
     * @property {module:model/Payment}
     */
    Payment,

    /**
     * The PaymentFailureReason model constructor.
     * @property {module:model/PaymentFailureReason}
     */
    PaymentFailureReason,

    /**
     * The PaymentRequest model constructor.
     * @property {module:model/PaymentRequest}
     */
    PaymentRequest,

    /**
     * The PaymentStatus model constructor.
     * @property {module:model/PaymentStatus}
     */
    PaymentStatus,

    /**
     * The RawDebugLogData model constructor.
     * @property {module:model/RawDebugLogData}
     */
    RawDebugLogData,

    /**
     * The Route model constructor.
     * @property {module:model/Route}
     */
    Route,

    /**
     * The RouteHint model constructor.
     * @property {module:model/RouteHint}
     */
    RouteHint,

    /**
     * The SendCoinsInput model constructor.
     * @property {module:model/SendCoinsInput}
     */
    SendCoinsInput,

    /**
     * The SendCoinsResponse model constructor.
     * @property {module:model/SendCoinsResponse}
     */
    SendCoinsResponse,

    /**
     * The SoftFork model constructor.
     * @property {module:model/SoftFork}
     */
    SoftFork,

    /**
     * The StartDoneData model constructor.
     * @property {module:model/StartDoneData}
     */
    StartDoneData,

    /**
     * The Statistics model constructor.
     * @property {module:model/Statistics}
     */
    Statistics,

    /**
     * The SystemInfo model constructor.
     * @property {module:model/SystemInfo}
     */
    SystemInfo,

    /**
     * The TxCategory model constructor.
     * @property {module:model/TxCategory}
     */
    TxCategory,

    /**
     * The TxStatus model constructor.
     * @property {module:model/TxStatus}
     */
    TxStatus,

    /**
     * The TxType model constructor.
     * @property {module:model/TxType}
     */
    TxType,

    /**
     * The UninstallData model constructor.
     * @property {module:model/UninstallData}
     */
    UninstallData,

    /**
     * The UnlockWalletInput model constructor.
     * @property {module:model/UnlockWalletInput}
     */
    UnlockWalletInput,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
     * The WalletBalance model constructor.
     * @property {module:model/WalletBalance}
     */
    WalletBalance,

    /**
    * The AppsApi service constructor.
    * @property {module:api/AppsApi}
    */
    AppsApi,

    /**
    * The BitcoinCoreApi service constructor.
    * @property {module:api/BitcoinCoreApi}
    */
    BitcoinCoreApi,

    /**
    * The LightningApi service constructor.
    * @property {module:api/LightningApi}
    */
    LightningApi,

    /**
    * The SetupApi service constructor.
    * @property {module:api/SetupApi}
    */
    SetupApi,

    /**
    * The SystemApi service constructor.
    * @property {module:api/SystemApi}
    */
    SystemApi
};
